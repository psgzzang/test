<?xml version="1.0"?>
<doc>
<assembly>
<name>
SPM
</name>
</assembly>
<members>
<member name="M:SPM.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
	<summary>
CreateInstance
</summary>
</member><member name="M:SPM.XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
	<summary>
GetPropertyValue
</summary>
</member><member name="M:SPM.XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
	<summary>
SetPropertyValue
</summary>
</member><member name="M:SPM.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
	<summary>
CreateDelegate
</summary>
</member><member name="M:SPM.XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
	<summary>
AddEventHandler
</summary>
</member><member name="T:SPM.XamlGeneratedNamespace.GeneratedInternalTypeHelper">
	<summary>
GeneratedInternalTypeHelper
</summary>
</member><member name="M:SPM.DirectDevicePrompting.DataEntryView.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:SPM.DirectDevicePrompting.DataEntryView">
	<summary>
DataEntryView
</summary>
</member><member name="P:SPM.VP3WebTransmit.XmlRequest">
	<summary>
 The XML to be transmitted to Chockstone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VP3WebTransmit.XmlResponse">
	<summary>
 The response received back from Chockstone
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VP3WebTransmit.TransmitDuration">
	<summary>
 The time it took to send the request and receive the response.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VP3WebTransmit.Errors">
	<summary>
 Gets the list of errors, if any, that occurred during the transmission.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VP3WebTransmit.DidTimeout">
	<summary>
 Gets whether a time out occurred during the transmission
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VP3WebTransmit.TestMode">
	<summary>
 Gets or sets the test mode
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VP3WebTransmit.HttpTimeout">
	<summary>
 Gets or sets the time that the HTTP request should wait for a response
 </summary>
	<value>The time in seconds</value>
	<returns></returns>
	<remarks>The default value is 20 seconds</remarks>
</member><member name="P:SPM.VP3WebTransmit.HostUrl">
	<summary>
 Gets or sets the URL to be used.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VP3WebTransmit.UserAgent">
	<summary>
 Gets or sets the UserAgent value.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The UserAgent is added to the HTTP header and should represent the POS Software in use.</remarks>
</member><member name="M:SPM.VP3WebTransmit.ValidateHostCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
	<summary>
 Validate the certificate that is returned from the server.
 </summary>
	<param name="sender"></param>
	<param name="certificate"></param>
	<param name="chain"></param>
	<param name="sslPolicyErrors"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.VP3WebTransmit.SendRequest">
	<summary>
 Sends the request and waits for the response.
 </summary>
	<returns>True if no error occurred during the transmission, false otherwise.</returns>
	<remarks></remarks>
</member><member name="M:SPM.VP3WebTransmit.SetAllowUnsafeHeaderParsing20">
	<summary>
 When sending ther request to Chockstone we have to allow for 
 "Unsafe Headers" because their headers terminate with just a LF and the .Net Framework
 expects them to terminate with CRLF.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.VP3WebTransmit">
	<summary>
 The HostWebTransmit class knows how to make the appropriate communication to host processor.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.VP3SimResponse">
	<summary>
 A class that will simulate a Chockstone response, in case of Cash Only transactions
 </summary>
	<remarks>
	</remarks>
</member><member name="M:SPM.VP3Response.ParseResponse(SPM.Transaction)">
	<summary>
 Parses the incoming response per the request type given
 </summary>
	<param name="transaction">The <see cref="T:SPM.Transaction"/> object that has the information to be populated</param>
	<returns>True if there weren't any errors in parsing, otherwise false.</returns>
	<remarks></remarks>
</member><member name="M:SPM.VP3Response.ParseTorResponse(SPM.Transaction)">
	<summary>
 Parses the response for a TOR request
 </summary>
	<param name="transaction"></param>
	<remarks></remarks>
</member><member name="M:SPM.VP3Response.ParseBalanceInquiryXml(SPM.Transaction@,System.Xml.XmlElement)">
	<summary>
 Reads the XML returned and populates the appropriate properties for a balance inquiry
 </summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.VP3Response.ParseAccountBalanceXml(SPM.Transaction@,System.Xml.XmlElement)">
	<summary>
 Reads the XML returned and populates the appropriate properties for the
 AccountBalance element
 </summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.VP3Response.ParseAdjustmentsXml(SPM.Payments,System.Xml.XmlNode)">
	<summary>
 Reads the XML returned and populates the appropriate properties for the
 Adjustment element.
 </summary>
	<param name="node"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.VP3Response">
	<summary>
 A class to handle the parsing of the response per the known Chockstone API
 </summary>
	<remarks>The class uses the older style of XmlDocuments for parsing.
 Since this portion was working from previous versions there wasn't an overwhelming
 benefit to rewrite using XML.Linq. Rewriting using LINQ should be considered in the future though.
 </remarks>
</member><member name="M:SPM.VP3Request.BuildXDocument(SPM.Transaction@,SPM.TORData)">
	<summary>
 The primary method to be called. This will build the XML and return as a StringBuilder
 </summary>
	<param name="transaction">The transaction information to build the document from.</param>
	<param name="timeoutReversal">The TOR data if it is present.</param>
	<returns>Returns a StringBuilder object for the XML</returns>
	<remarks></remarks>
</member><member name="T:SPM.IWebTransmit">
	<summary>
 The HostWebTransmit class knows how to make the appropriate communication to host processor.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Wallets.ClassId">
	<exclude/>
</member><member name="F:SPM.Wallets.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Wallets.EventsId">
	<exclude/>
</member><member name="P:SPM.Wallets.Item(System.Int32)">
	<summary>
 The default property for the collection. Specifies the specific
 <see cref="T:SPM.Wallet"/> object to work with.
 </summary>
	<param name="index">
 The unique index into the collection for the specific
 <see cref="T:SPM.Wallet"/>.
 </param>
</member><member name="P:SPM.Wallets.Count">
	<summary>
 Gets the number of <see cref="T:SPM.Wallet"/> objects in the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Wallets.AddObject(SPM.Wallet)">
	<summary>Adds an <see cref="T:SPM.Wallet"/> object to the collection.</summary>
	<returns>Returns the index of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.Wallet"/> object to add to the collection.
 </param>
</member><member name="M:SPM.Wallets.LogMe">
	<summary>
 Logs me.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Wallets.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">The title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="T:SPM.Wallets">
	<summary>
 A collection of <see cref="T:SPM.Wallet"/> objects.
 </summary>
	<remarks></remarks>
	<moduleiscollection/>
</member><member name="F:SPM.Wallet.ClassId">
	<exclude/>
</member><member name="F:SPM.Wallet.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Wallet.EventsId">
	<exclude/>
</member><member name="P:SPM.Wallet.AccountStatus">
	<summary>
 Gets the <see cref="P:SPM.Wallet.AccountStatus"/> of the Wallet.
 </summary>
</member><member name="P:SPM.Wallet.AccountStatusDescription">
	<summary>
 Gets a string representation of the <see cref="P:SPM.Wallet.AccountStatus"/>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AccountStatusDescriptionLocalized">
	<summary>
 Gets a localized string representation of the <see cref="P:SPM.Wallet.AccountStatus"/>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AmountActivated">
	<summary>
 The amount the wallet was activate with in the last transaction.  Applies only to new <see cref="T:SPM.Card"/>s.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AmountAdded">
	<summary>
 Gets the amount added to this wallet during the last transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AmountBalance">
	<summary>
 Gets the wallet balance after the last transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AmountBonus">
	<summary>
 Gets the amount added to the wallet in the last transaction due to a promotional bonus.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AmountRedeemed">
	<summary>
 Gets the amount redeemed from the wallet during the last transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AmountTransferFrom">
	<summary>
 Gets the amount that was transferred from this wallet during the last transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.AmountTransferTo">
	<summary>
 Gets the amount that was transferred to this wallet during the last transaction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.Currency">
	<summary>
 Gets the currency.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.CurrencyType">
	<summary>
 Gets the <see cref="P:SPM.Currency.ID"></see> of the wallet.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.CurrencyTypeDescription">
	<summary>
 Gets the name of the <see cref="T:SPM.Currency">Currency</see>.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Wallet.Key">
	<summary>
 Gets the unique that identifies this wallet in the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Wallet.LogMe">
	<summary>
 Logs me.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Wallet.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">The title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="T:SPM.Wallet">
	<summary>
 Designates an object that stores value.  For instance a wallet could hold U.S. Dollars or
 it could hold Points.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Utility.ConvertLF(System.String)">
	<summary>
 Converts LF to CRLF.
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks>
 This is used as many UNIX based web services return the content with a LF terminating the line
 instead of a CRLF.
 </remarks>
</member><member name="M:SPM.Utility.XmlPrettyPrint(System.String,System.Int32)">
	<summary>
 Used to format an XML statement so that when printed it looks pretty.
 </summary>
	<param name="s"></param>
	<param name="indent"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Utility.NumbersOnly(System.String,System.Boolean)">
	<summary>
 Function to return only the numeric characters in a string.
 </summary>
	<param name="value">The numeric characters in a string in the same order they appear in the string.</param>
	<param name="consecutiveOnly">Optional, default is true.  When set the function will stop looking for additional
 numeric characters once a numeric character was found and then a non-numeric character found.  If set to false,
 then all numeric characters will be returned regardless of their position in the text.
 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Utility.WrapText(System.String,System.Int32)">
	<summary>
 Wraps text to the specified width
 </summary>
	<param name="text"></param>
	<param name="width"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Utility.Sanitize(System.String,System.Int32,System.Int32,System.Char)">
	<summary>
 Masks a string with the maskChar character the number of maxMask character and then using
 the right most characters of the value.
 </summary>
	<param name="value">The string to be sanitized</param>
	<param name="width">Optional. The number of right most characters. Defaults to 4</param>
	<param name="maxMask">Optional. The number of mask characters to use. Defaults to 12</param>
	<param name="maskChar">Optional. The mask character to use. Defaults to '*'</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Utility.LaunchProcessAndWait(System.IO.FileInfo,System.String)">
	<summary>
 Launch an application and wait for a specified amount of time for it to complete.
 </summary>
	<param name="fi">The file info of the file to launch</param>
	<remarks></remarks>
</member><member name="T:SPM.Utility">
	<summary>
 A class to run utility procedures. Methods are shared.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.ClassId">
	<exclude/>
</member><member name="F:SPM.TenderType.InterfaceId">
	<exclude/>
</member><member name="F:SPM.TenderType.EventsId">
	<exclude/>
</member><member name="F:SPM.TenderType.Cash">
	<summary>
 The payment is presented as cash.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.Check">
	<summary>
 The payment is presented as a check.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.CreditCard">
	<summary>
 The payment uses a credit card or a debit card used as credit
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.DebitCard">
	<summary>
 The payment uses a PIN based debit card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.GiftCard">
	<summary>
 The payment uses the 'cash' wallet of a Subway Card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.RewardsCard">
	<summary>
 The payment uses the 'points' wallet of a Subway Card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.Mobile">
	<summary>
 The payment uses a Mobile Wallet type tender
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.CouponVoucher">
	<summary>
 The payment uses a CouponVoucher
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.PayPal">
	<summary>
 The payment uses a PayPal account.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TenderType.Certificate">
	<summary>
 The payment uses a Certificate.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.#ctor(System.Int32,System.String,System.String)">
	<param name="id">The id to use for the TenderType</param>
	<param name="name">The name of the TenderType.</param>
	<param name="description">The description of the TenderType.</param>
</member><member name="P:SPM.TenderType.ID">
	<summary>
 Gets the ID.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.TenderType.Name">
	<summary>
 Gets the name.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.TenderType.Description">
	<summary>
 Gets the description.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.TenderType.PaymentMethod">
	<summary>
 Gets the associated Payment Method for this tender type
 </summary>
	<value></value>
	<returns></returns>
	<remarks>All custom tender types currently use the Cash PaymentMethod</remarks>
</member><member name="P:SPM.TenderType.Index">
	<summary>The index into the internally stored array.</summary>
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.TenderType.Load">
	<summary>
 Load the default Tender Type file if it exists and add to the collection of Tender Types in use
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.GetTenderType(System.String)">
	<summary>
 Gets the PaymentMethod.
 </summary>
	<param name="name">The name.</param>
	<returns>Returns the TenderType with the corresponding name.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.GetTenderType(System.Int32)">
	<summary>
 Gets the PaymentMethod.
 </summary>
	<param name="id">The id.</param>
	<returns>Returns the TenderType with the corresponding id.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.ToList">
	<summary>
 Call this method to retrieve a list of valid TenderTypes.
 </summary>
	<returns>Returns the list of TenderTypes.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.ToString">
	<summary>
 Overrides the ToString method to output the ID and Name properties
 </summary>
	<returns>Returns a string representation of the TenderType.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.Equals(System.Object)">
	<summary>
 Performs the equality operation.
 </summary>
	<param name="value">The value to be compared to the current instance.</param>
	<returns>Returns true if the TenderTypes are equal, false otherwise.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.CompareTo(SPM.TenderType)">
	<summary>
 Compare two TenderTypes.
 </summary>
	<param name="other">The TenderType to compare to.</param>
	<returns>Returns an integer representing the relative values of the IDs of the TenderTypes.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TenderType.op_LessThan(SPM.TenderType,SPM.TenderType)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.TenderType.op_GreaterThan(SPM.TenderType,SPM.TenderType)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.TenderType.op_Equality(SPM.TenderType,SPM.TenderType)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.TenderType.op_Inequality(SPM.TenderType,SPM.TenderType)">
	<exclude/>
	<excludetoc/>
</member><member name="T:SPM.TenderType">
	<summary>
 A class to track the payment type
 </summary>
	<remarks>
 Default values are:
 Cash = 0
 Check = 1
 CreditCard = 2
 DebitCard = 3
 GiftCard = 4
 RewardsCard = 5

 Additional payment types can be added by placing the properly formatted SPMPaymentType.xml file
 in the SPM configuration folder or by instantiating new payment types programmatically
 </remarks>
</member><member name="P:SPM.StopWatch.ElapsedTime">
	<summary>
 The elapsed time since the <see cref="M:SPM.StopWatch.StartWatch"/> command. 
 If the timer is no longer running then this is the total time the 
 <see cref="T:SPM.StopWatch"/> ran.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.StopWatch.StartWatch">
	<summary>
 Starts the timing for the <see cref="T:SPM.StopWatch"/>
	</summary>
	<remarks></remarks>
</member><member name="M:SPM.StopWatch.EndWatch">
	<summary>
 Ends the timing for the <see cref="T:SPM.StopWatch"/>
	</summary>
	<remarks></remarks>
</member><member name="M:SPM.StopWatch.InitWatch">
	<summary>
 Sets the starting values for the stop watch
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.StopWatch">
	<summary>
 This class represents a Stop Watch feature instead of a Timer.
 In other words, when the stop watch is started the elapsed time will increase until 
 the user ends the watch.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ClassId">
	<exclude/>
</member><member name="F:SPM.SpmEnums.InterfaceId">
	<exclude/>
</member><member name="F:SPM.SpmEnums.EventsId">
	<exclude/>
</member><member name="F:SPM.SpmEnums.CardPurposes.Unknown">
	<summary>
 The purpose of the card is unknown. This is the default setting of a new card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardPurposes.Subway">
	<summary>
 The card is intended to be used for either Cash, Rewards or both.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardPurposes.Credit">
	<summary>
 The card is intended to be processed as a Credit Card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardPurposes.Debit">
	<summary>
 The card is intended to be processed as a Debit Card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardPurposes.Mobile">
	<summary>
 The card is intended to be processed as a Mobile Payment.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardPurposes.PayPal">
	<summary>
 The card is intended to be processed as a PayPal payment.
 </summary>
</member><member name="T:SPM.SpmEnums.CardPurposes">
	<summary>
 Denotes the intended purpose of the card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ScanEventTypes.Unknown">
	<summary>
 The purpose of the ScanEvent is unknown.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ScanEventTypes.StandaloneCoupon">
	<summary>
 The ScanEvent is intended to be processed as Standalone Scanned Coupon.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ScanEventTypes.PhysicalLoyaltyCard">
	<summary>
 The ScanEvent is intended to be processed as Physical Loyalty Card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ScanEventTypes.MobileAppScan">
	<summary>
 The ScanEvent is intended to be processed as Mobile app scanned.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.ScanEventTypes">
	<summary>
 The purpose of the ScanEvent
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.Unknown">
	<summary>
 The type for the card is yet unknown.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.Subway">
	<summary>
 The card is used as a Cash Card or Rewards Card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.Amex">
	<summary>
 An American Express card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.Diners">
	<summary>
 A Diner's Club card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.Discover">
	<summary>
 A Discover card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.EnRoute">
	<summary>
 An EnRoute card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.JCB">
	<summary>
 A JCB card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.MasterCard">
	<summary>
 A MasterCard card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.VISA">
	<summary>
 A VISA card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.PayPal">
	<summary>
 PayPal.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.SubwayGift">
	<summary>
 Subway Gift card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardBrands.SubwayReward">
	<summary>
 Subway Reward card.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.CardBrands">
	<summary>
 The brand of a card (e.g. VISA, MasterCard, Subway)
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CardStatuses.NotAcquired">
	<summary>Acquiring the card information has not begun.</summary>
</member><member name="F:SPM.SpmEnums.CardStatuses.Acquiring">
	<summary>Card information is being acquired. E.g. waiting for the user to swipe the card through the card reader device.</summary>
</member><member name="F:SPM.SpmEnums.CardStatuses.Acquired">
	<summary>Card information has been acquired but not yet processed.</summary>
</member><member name="F:SPM.SpmEnums.CardStatuses.Processed">
	<summary>The card has been processed through the host processor.</summary>
</member><member name="T:SPM.SpmEnums.CardStatuses">
	<summary>Denotes the status of the card while acquiring the card information.</summary>
</member><member name="F:SPM.SpmEnums.ConnectionMethods.Internet">
	<summary>
 Send the request using HTTPS technology.
 </summary>
</member><member name="F:SPM.SpmEnums.ConnectionMethods.Dialer">
	<summary>
 Send the request using a modem.
 </summary>
</member><member name="T:SPM.SpmEnums.ConnectionMethods">
	<summary>
 The default method the Payment Manager should use to connect to the host.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.None">
	<summary>
 Used to denote no error occurred.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.Windows">
	<summary>
 The error was generate by Windows.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.SPM">
	<summary>
 The error was generated by the Payment Manager. In other words the Payment Manager
 recognized that there is an issue with the request and is stopping the processing.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.Host">
	<summary>
 The error was generated at the host. This means that there was something wrong with the request
 or the host simply could not process the request.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.CardProcessor">
	<summary>
 The error occurred at the Credit/Debit card processor.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.CouponAvailable">
	<summary>
 The error is that a coupon was collected but not processed.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.OutOfMemory">
	<summary>
 The error is that a coupon was collected but not processed.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ErrorTypes.Unknown">
	<summary>
 An error occurred but it can not be determined the origin of the error.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.ErrorTypes">
	<summary>
 Designates the origin of an error to a small number of entities.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.LineItemTypes.Merchandise">
	<summary>
 The line item is intended to communicate PLU information.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.LineItemTypes.AddGift">
	<summary>
 The line item is intended to be used to add value to a Cash Card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.LineItemTypes.Tax">
	<summary>
 The line item is used to designate the amount of tax to be paid
 </summary>
	<remarks>The PLU will automatically be set to TAX with this line item type.</remarks>
</member><member name="T:SPM.SpmEnums.LineItemTypes">
	<summary>
 Designates the purpose of a <see cref="T:SPM.LineItem"></see>.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.Cash">
	<summary>
 The payment was made with Cash.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.Check">
	<summary>
 The payment was made with a check.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.CreditCard">
	<summary>
 The payment was made with a credit card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.DebitCard">
	<summary>
 The payment was made with a debit card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.GiftCard">
	<summary>
 The payment was made with a Cash Card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.RewardsCard">
	<summary>
 The payment was made with a Rewards Card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.Mobile">
	<summary>
 The payment was made with a Mobile App
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.CouponVoucher">
	<summary>
 The payment was made with a Coupon
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.PayPal">
	<summary>
 The payment was made with a PayPal account.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.PaymentMethods.Certificate">
	<summary>
 The payment was made with a Certificate.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.PaymentMethods">
	<summary>
 Designates the possible methods of payments.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ReceiptTypes.Default">
	<summary>
 The default value is to not add either 'Merchant Copy' or 'Customer Copy' at the
 bottom of the receipt text, but allow the POS system to handle it.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ReceiptTypes.Merchant">
	<summary>
 Add 'Merchant Copy' at the bottom of the receipt text.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ReceiptTypes.Customer">
	<summary>
 Add 'Customer Copy' at the bottom of the receipt text.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.ReceiptTypes">
	<summary>
 When requesting the receipt text the user can ask for it in a specific way. This value is
 primarily used for credit card receipts where it is required to print the words
 'Merchant Copy' or 'Customer Copy' at the bottom of the receipt.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Unknown">
	<summary>
 The default state before a request type is designated.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Ping">
	<summary>
 A Ping request
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.BalanceInquiry">
	<summary>
 An inquiry as to the balance of a Subway(R) card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.AddAccountAlias">
	<summary>
 Adds an alias to represent a Subway(R) card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.RemoveAccountAlias">
	<summary>
 Removes an account alias from a Subway(R) card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Order">
	<summary>
 An order request is being made.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.AdjustOrder">
	<summary>
 An adjustment to a previous order is being made. This is not a void, but
 an adjustment, typically due to insufficient funds on the previous order.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.ValidateConfig">
	<summary>
 This type is obsolete at host processor but retained here for legacy purposes.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Void">
	<summary>
 A void or cancellation of a previous request.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Transfer">
	<summary>
 A transfer of balances from one active card to an in-active card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Merge">
	<summary>
 A transfer of balances from one active card to another active card.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Freeze">
	<summary>
 Freezes all activity on a card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Unfreeze">
	<summary>
 Unfreezes a card that was previously frozen.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.TOR">
	<summary>
 A TimeOut Reversal request.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Raw">
	<summary>
 Sending the request in the clear. This useful during testing.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.Any">
	<summary>
 The request can be any type.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.CouponInquiry">
	<summary>
 An inquiry of a Subway(R) coupon.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.RequestTypes.PhoneNumberLookUp">
	<summary>
 A Phone Number look up request.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.RequestTypes">
	<summary>
 Used internally but made available externally on the different types of request that
 are supported by the Payment Manager.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ResultStatuses.Unknown">
	<summary>
 An unknown state.  Either there was an error prior to sending the request to the host, or
 an error occurred in getting a response from the host.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ResultStatuses.Fail">
	<summary>
 The request failed at the host or an error occurred during processing.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.ResultStatuses.OK">
	<summary>
 The request was successful as requested.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.ResultStatuses">
	<summary>
 The status of the request from the host processor.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.DeviceDiagStatus.Unknown">
	<summary>
 An unknown state.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.DeviceDiagStatus.OK">
	<summary>
 The device is ready to use
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.DeviceDiagStatus.Fail">
	<summary>
 Failed to determine the device status
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.DeviceDiagStatus.NotReady">
	<summary>
 The device is not ready to use and needs to be repaired vis SPM setup process
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.DeviceDiagStatus.Disconnected">
	<summary>
 The device is unplugged
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.DeviceDiagStatus.InvalidCredential">
	<summary>
 The device requires the credentails to be setup properly, and the credential is not valid.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.DeviceDiagStatus.HostProcessorOffline">
	<summary>
 The device requires online host processor (ie. VP3) to be setup properly, and the host processor is curretly offline
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.DeviceDiagStatus">
	<summary>
 The status of the Devices currently used Condition from the host processor.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.Unused">
	<summary>
 The default value when a <see cref="T:SPM.Wallet">Wallet</see> is created.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.Added">
	<summary>
 Value was added to the <see cref="T:SPM.Wallet">Wallet</see>.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.Redeem">
	<summary>
 Value was subtracted from the <see cref="T:SPM.Wallet">Wallet</see>.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.TransferTo">
	<summary>
 Value was transferred to this <see cref="T:SPM.Wallet">Wallet</see> from another on
 a different <see cref="T:SPM.Card">Card</see>.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.TransferFrom">
	<summary>
 Value was transferred from this <see cref="T:SPM.Wallet">Wallet</see> to another on a
 different <see cref="T:SPM.Card">Card</see>.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.MergeTo">
	<summary>
 Value was transferred to this <see cref="T:SPM.Wallet">Wallet</see> from another on
 a different <see cref="T:SPM.Card">Card</see>.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.MergeFrom">
	<summary>
 Value was transferred from this <see cref="T:SPM.Wallet">Wallet</see> to another on a
 different <see cref="T:SPM.Card">Card</see>.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.Activated">
	<summary>
 The <see cref="T:SPM.Wallet">Wallet</see> was activated for the first time.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.Deactivated">
	<summary>
 The <see cref="T:SPM.Wallet">Wallet</see> was deactivated.  This value is not currently used.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.UsageTypes.Bonus">
	<summary>
 Bonus value was added to the <see cref="T:SPM.Wallet">Wallet</see>.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.UsageTypes">
	<summary>
 Designates how a wallet can be used during a transaction.
 </summary>
	<remarks>These values can be OR'd together to denote multiple uses</remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.Unknown">
	<summary>
 Default setting
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.PayCreditCard">
	<summary>
 Used when paying with a credit card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.PayDebitCard">
	<summary>
 Used when paying with a debit card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.PaySubwayCashCard">
	<summary>
 Used when paying with cash on a Subway Card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.PaySubwayRewardsCard">
	<summary>
 Used when redeeming points on a Subway Card
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.AddPointsSubwayCard">
	<summary>
 Used to obtain card information when just adding points
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.FromSubwayCard">
	<summary>
 Used to obtain the 'From' Card information
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.ToSubwayCard">
	<summary>
 Used to obtain the 'To' Card information
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.GenericSubwayCard">
	<summary>
 Obtaining a generic card information (e.g. Balance Inquiry)
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.VoidPointsSubwayCard">
	<summary>
 Used to obtain card information for a Rewards card when voiding.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.PayMobile">
	<summary>
 Used when paying with a Mobile App
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.TransactionTypes.ChipVerification">
	<summary>
 Used when EMV ChipVerification after the host processor
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.TransactionTypes">
	<summary>
 Designates the type of transaction to be conducted in obtaining card information.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.Processor">
	<summary>
 The proccessor of a payment that is used.    
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums.ProcessorTypes">
	<summary>
 The Types of proccessor of a payment that is used.    
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.AcquireMethods.Swipe">
	<summary>
 Card information was obtained by swiping the card through a card reader.
 </summary>
</member><member name="F:SPM.SpmEnums.AcquireMethods.Manual">
	<summary>
 Card information was obtained by entering the information directly into the POS.
 </summary>
</member><member name="F:SPM.SpmEnums.AcquireMethods.NFC">
	<summary>
 Card information was obtained by using an NFC device such as MagTek Contactless device
 </summary>
</member><member name="F:SPM.SpmEnums.AcquireMethods.Scan">
	<summary>
 Card information was obtained by using a scanner
 </summary>
</member><member name="T:SPM.SpmEnums.AcquireMethods">
	<summary>
 The enums of methods that a card was acquired.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.SpmEnums.CouponStatus.UNKNOWN">
	<summary>
Coupon is in unknown state
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.ACTIVE">
	<summary>
Coupon is active and redeemable
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.REDEEMED">
	<summary>
Coupon was redeemed
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.REDEEM_PENDING">
	<summary>
Coupon is pending redemption
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.EXPIRED">
	<summary>
Coupon is expired
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.CANCELLED">
	<summary>
Coupon is cancelled
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.REVERSAL_PENDING">
	<summary>
Coupon is pending for reversal
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.REVERSAL_FAILED">
	<summary>
Coupon failed reversal
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.VOID_PENDING">
	<summary>
Coupon is pending to be voided
</summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.REFUND_PENDING">
	<summary>
 Coupon is pending refund
 </summary>
</member><member name="F:SPM.SpmEnums.CouponStatus.INVALID">
	<summary>
 Coupon is invalid
 </summary>
</member><member name="T:SPM.SpmEnums.CouponStatus">
	<summary>
 Indicate the current status of a coupon.
 </summary>
</member><member name="F:SPM.SpmEnums.CouponCampaignTypes.Unknown">
	<summary>
Unknown Campaine Type
</summary>
</member><member name="F:SPM.SpmEnums.CouponCampaignTypes.Standard">
	<summary>
Standard type
</summary>
</member><member name="F:SPM.SpmEnums.CouponCampaignTypes.SurpriseAndDelight">
	<summary>
Coupon was redeemed
</summary>
</member><member name="T:SPM.SpmEnums.CouponCampaignTypes">
	<summary>
 Coupon Campaine Type
 </summary>
</member><member name="T:SPM.SpmEnums.ConnectionState">
	<summary>
 Designates the type of ConnectionState.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SpmEnums">
	<summary>A special class to hold the enumerators used in the library.</summary>
</member><member name="M:SPM.ValidEnums.AcquiredMethods">
	<summary>
 Returns an IList for acceptable <see cref="T:SPM.SpmEnums.AcquireMethods"/>.
 </summary>
	<returns>Returns a list of AcquiredMethods.</returns>
	<remarks></remarks>
</member><member name="M:SPM.ValidEnums.CardPurposes">
	<summary>
 Returns an IList for acceptable <see cref="T:SPM.SpmEnums.CardPurposes"/>.
 </summary>
	<returns>Returns a list of CardPurposes.</returns>
	<remarks></remarks>
</member><member name="M:SPM.ValidEnums.ConnectionMethods">
	<summary>
 Returns an IList for acceptable <see cref="T:SPM.SpmEnums.ConnectionMethods"/>.
 </summary>
	<returns>Returns a list of ConnectionMethods.</returns>
	<remarks></remarks>
</member><member name="M:SPM.ValidEnums.PaymentMethods">
	<summary>
 Returns an IList for acceptable <see cref="T:SPM.SpmEnums.PaymentMethods"/>.
 </summary>
	<returns>Returns a list of PaymentMethods.</returns>
	<remarks></remarks>
</member><member name="T:SPM.ValidEnums">
	<summary>
 Used to return the possible values for various Enums.  This class is only usable by other
 .Net applications and is not exposed in the COM environment.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Response.ClassId">
	<exclude/>
</member><member name="F:SPM.Response.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Response.EventsId">
	<exclude/>
</member><member name="P:SPM.Response.HostFooter">
	<summary>
 Gets the information that should be displayed at the footer of the receipt as returned from the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.CertFooter">
	<summary>
 Gets the credit/debit card information that should be included on the receipt.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.ReceiptText(SPM.SpmEnums.ReceiptTypes)">
	<summary>
 Gets an approved format of the receipt contents, including Subway(R) Card balances and activity, 
 Credit/Debit card certification block, and promotional messages from the host.
 </summary>
	<param name="ReceiptType">Designates the type of receipt to print.
 <list><see cref="F:SPM.SpmEnums.ReceiptTypes.Default">Default</see> - returns the receipt text
 without 'Merchant Copy' or 'Customer Copy'</list>
		<list><see cref="F:SPM.SpmEnums.ReceiptTypes.Merchant">Merchant</see> - returns the receipt text
 with 'Merchant Copy' under the Credit/Debit card certification section.
 </list>
		<list><see cref="F:SPM.SpmEnums.ReceiptTypes.Customer">Merchant</see> - returns the receipt text
 with 'Customer Copy' under the Credit/Debit card certification section.
 </list>
	</param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.ClerkMessage">
	<summary>
 Gets any 'Clerk Message' returned from the host. The idea is that if a value is present here the
 POS should display the message immediately.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.ResultStatus">
	<summary>
 Gets the appropriate <see cref="T:SPM.SpmEnums.ResultStatuses">ResultStatus</see> from the host.
 </summary>
	<value>
		<list><see cref="F:SPM.SpmEnums.ResultStatuses.OK">OK</see> - the call to the host was successful.</list>
		<list><see cref="F:SPM.SpmEnums.ResultStatuses.Fail">Fail</see> - the call to the host was received '
 and processed at the host, but the transaction failed for some reason. See <see cref="P:SPM.Response.Reason">Reason</see> 
 for the description of the failure.</list>
	</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.Reason">
	<summary>The description of why a transaction failed at the host.</summary>
</member><member name="P:SPM.Response.Value">
	<summary>The "value" return by the host for this transaction.</summary>
</member><member name="P:SPM.Response.OrderLineNumber">
	<summary>
 Gets the line number that caused a failure.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.AlertType">
	<summary>
 Gets a designation as to the type of error that occurred at the host.
 </summary>
	<value>Possible values appear to be "application" and "system"</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.AlertName">
	<summary>
 Gets a category of failure for the request, it is not necessarily a clear indication of the
 failure. Use the <see cref="P:SPM.Response.Reason">Reason</see> property for the fuller description of the error.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.RequestID">
	<summary>
 Gets the RequestID that the host processed. This should match the <see cref="P:SPM.Request.RequestId">Request.RequestID</see>.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.Requester">
	<summary>
 This property is now obsolete and will be deprecated in a future release.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.Fail">
	<summary>
 This property is now obsolete and will be deprecated in a future release.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.DateTime">
	<summary>
 Gets the date/time that the transaction was processed at the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Response.XmlNamespace">
	<summary>
 Gets the namespace, if any, specified in the XML returned by the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.Response">
	<summary>
 Records the response received from the host
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Request.ClassId">
	<exclude/>
</member><member name="F:SPM.Request.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Request.EventsId">
	<exclude/>
</member><member name="M:SPM.Request.#ctor">
	<summary>The constructor for the Request object.</summary>
</member><member name="M:SPM.Request.UnhandledThreadExceptionHandler(System.Object,System.Threading.ThreadExceptionEventArgs)">
	<exclude/>
</member><member name="M:SPM.Request.Finalize">
	<exclude/>
	<excludetoc/>
</member><member name="F:SPM.Request.OOMTriggered">
	<summary>
 Indicates whether out of memory is triggered.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Request.PMthreadRunning">
	<summary>
 Indicates whether perform maintenance is running.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Request._requestType">
	<summary>
 Denotes the type of request being made.  This variable is set during one of the
 method calls and then is used to switch unique processes in common routines.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Request._stopWatchRequest">
	<summary>
 Used to track the duration of the request.  This is used purely for statistical purposes
 and has no procedural value.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Request.Processor">
	<summary>
 Gets the processor for this request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.ProcessorTransactionData">
	<summary>
 Gets the mobile payment data for this request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.LoggingLevel">
	<summary>
 Gets or sets the level of logging to perform.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.StoreID">
	<summary>
 Gets or sets the identifier of the store. This will be used in the 'sellerId' field in
 communicating to host processor.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.TerminalID">
	<summary>
 Gets or sets the cash register identification. Can be whatever the POS system decide.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.HostDomain">
	<summary>
 Gets the domain to use for all requests.
 This property is present mainly for testing purposes which
 may require changing the domain.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.Password">
	<summary>
 Gets or sets the password to be used with the <see cref="P:SPM.Request.StoreID"/> when logging in to the host.
 This value is normally read from the configuration file.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.PerformDialBackup">
	<summary>
 Gets or sets whether to perform the transaction by using the modem in the case
 that the broadband connection is down.
 </summary>
</member><member name="P:SPM.Request.CurrentLanguage">
	<summary>
 Gets or sets the language to use to present error messages or receipt text items.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.LanguageName">
	<summary>
 Gets the name of the language selected.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.CommPort">
	<summary>
 Gets the COMM port used for dial on demand feature
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The COMM port is set using the Configuration Manager application and is stored in the
 configuration file.</remarks>
</member><member name="P:SPM.Request.ModemCommands">
	<summary>
 Gets the modem initialization string sent to the modem prior to dialing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The modem command is set using the Configuration Manager and is stored in
 the configuration file.</remarks>
</member><member name="P:SPM.Request.ModemSettings">
	<summary>
 Gets the modem settings used when dialing.  The settings are a comma separated list in this order:
 baud rate, data bits, parity, stop bits
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.TorExists">
	<summary>Gets whether a TOR file exists on the system or not.</summary>
	<value>True means that a TOR file exists, False means that one does not exist.</value>
	<remarks>
 The TOR file is used to store the transaction number of a <em>Payment
 Manager</em> transaction. If the file exists then the SPM is either in the middle of a
 transaction or has experienced a timeout. The <em>Payment Manager</em> will delete the
 file upon a successful receipt of a response from the host.
 </remarks>
</member><member name="P:SPM.Request.ClerkID">
	<summary>Gets or sets the identity of the Clerk that is processing the transaction.</summary>
</member><member name="P:SPM.Request.BusinessDate">
	<summary>
 Gets or sets the BusinessDate.
 Note: This not the stamp of the current time, but the current business day of POS software.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Request.RequestId">
	<summary>
 Gets or sets the identifier for the request to the host. The value should be unique for
 each request through out the day for this store and terminal.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Request.Note">
	<summary>
 Gets or sets the note to send with the request to the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.PosVersion">
	<summary>
 Gets or sets the version of the POS software, that will be sent to the host for tracking.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.PosStoreNumber">
	<summary>
 Gets/sets the store number that the POS Software uses.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.Sender">
	<summary>
 Gets or sets the 'Sender' of the request to the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.RawRequest">
	<summary>
 Gets or sets the raw XML of the request that will be sent to the host.  Setting
 XML is only useful if calling the <see cref="M:SPM.Request.ProcessRawRequest(System.String)">ProcessRawRequest</see> method.
 Otherwise, the request will be built internally.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.RawRequestPretty">
	<summary>
 Read-only. Gets the raw XML that was sent to the host, wrapped and indented at each XML node.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.ForceClerkMessage">
	<summary>
 Gets or sets whether to force the host to return a Clerk Message. Note the method is not
 available on the host in production. It is only useful during testing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.ForceTimeout">
	<summary>
 Gets or sets whether to have the host timeout on purpose or not.  Note: the property is not available
 on the host in production.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.ForceNsf">
	<summary>
 Gets or sets the force NSF.
 </summary>
	<value>The force NSF.</value>
	<remarks></remarks>
</member><member name="P:SPM.Request.RequestType">
	<summary>
 Designate the type of request.  This is useful to know what minimum requirements needed
 to be present and some types require special processing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.RequireAccountID">
	<summary>
 Gets if the Request requires AccountID in the Cardcollections to process order
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.FailModeText">
	<summary>
 Read-only. Gets the text to send to host processor to force certain 'errors'. (e.g. Forced timeout or
 forced clerk message.)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.NextLineNumber">
	<summary>Gets the largest Line Number in the collection.</summary>
</member><member name="P:SPM.Request.DidTimeout">
	<summary>
 Gets or sets whether this request has timed out as boolean.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.DialerDurationDial">
	<summary>
 An obsolete property that always returns 0.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.DialerDurationInit">
	<summary>
 An obsolete property that always returns 0.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.DialerDurationOffHook">
	<summary>
 An obsolete property that always returns 0.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.DialerDurationTransfer">
	<summary>
 An obsolete property that always returns 0.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.DialerVersion">
	<summary>
 Gets the version of the Dialer DLL used.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.DLLVersion">
	<summary>
 Gets the DLL version of the Payment Manager
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.Version">
	<summary>
 Gets the 'marketing' version of the Payment Manager
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.HostVersion">
	<summary>
 Gets the version of the software at the host processor.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.ServerID">
	<summary>
 Gets the version of the server machine, if available
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.Order">
	<summary>
 Gets the Order object for the Request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.Cards">
	<summary>
 Gets the collection of cards used in the request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.PhoneLookedUpCards">
	<summary>
 Gets the collection of cards used in the request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.CardNew">
	<summary>
 Gets the 'New' card used in Merges and Transfers
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.CardOld">
	<summary>
 Gets the 'Old' card used in Merges and Transfers.  This is also the card used for
 <see cref="M:SPM.Request.BalanceInquiry(SPM.Card@)">BalanceInquiry</see> and <see cref="M:SPM.Request.UnFreezeCard">UnfreezeCard</see>.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.CardPromo">
	<summary>
 Gets/Sets the card that will receive any promotional points during this request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If a Promo card was not already part of the collection it will be created.</remarks>
</member><member name="P:SPM.Request.HasPromoCard">
	<summary>
 Gets whether or not the Cards collection has a card that is designated as promo
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The user must use this method instead of checking to see if "CardPromo" is nothing
 since doing so will create one if not already present.
 </remarks>
</member><member name="M:SPM.Request.AddCardPromo(SPM.Card)">
	<summary>
 Adds a "promo card" to the card collection. This is the card that will be given points
 </summary>
	<param name="card">Optional. The <see cref="T:SPM.Card"/> object that will be given the points.</param>
	<returns>Will return True if the card object is assigned properly, and false otherwise.</returns>
	<remarks>
		<br>The <see cref="T:SPM.Card"/> object is optional. If not passed in then the SPM will prompt for the card information.</br>
		<para></para>
 If the method returns false, check the <see cref="P:SPM.Request.Error"/> property for what went wrong.
 </remarks>
</member><member name="P:SPM.Request.RawResponse">
	<summary>
 The raw XML received from the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>All card information will be displayed in the clear.  It is the callers responsibility
 to mask credit/debit/cash/rewards card information.</remarks>
</member><member name="M:SPM.Request.SetRawResponse(System.String)">
	<summary>
	</summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:SPM.Request.Response">
	<summary>
 The <see cref="P:SPM.Request.Response">Response</see> object. The <see cref="P:SPM.Request.Response">Response</see> properties are populated
 once the response from the host is received.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.TransmitDuration">
	<summary>
 The time it takes from sending the request to receiving the response.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.RequestDuration">
	<summary>
 Gets the total time taken during the call to a Payment Manager method until
 the Payment Manager responds back to the POS.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:SPM.Request._errors">
	<summary>
 Collection of errors for the Request.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Request.Errors">
	<summary>
 Gets the collection of <see cref="P:SPM.Request.Error">Errors</see> that occurred during the call
 to one of the Request methods.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.Error">
	<summary>
 Gets the last <see cref="P:SPM.Request.Error">Error</see> that occurred during processing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.RetriesAttempted">
	<summary>
 Gets the number of times the Payment Manager has attempted to process the transaction
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Note: if the value is greater than 0 the POS software should recapture the RequestID, if interested.</remarks>
</member><member name="P:SPM.Request.AdminMode">
	<summary>
 Read-only. Denotes whether the Payment Manager is in Admin mode or not.
 Admin mode is used by the Configuration Manager to set properties that POS
 Software is not authorized to set.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.AdminText">
	<summary>
 By setting this value with the appropriate text the Payment Manager is put into admin mode.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.Request.AdminToolLocation">
	<summary>
 Gets the location of the Configuration Manager executable.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.LogFileLocation">
	<summary>
 Gets the location of the log file.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.TestMode">
	<summary>
 Gets or sets whether the Payment Manager is in test mode.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Request.CashOnlyTimeout">
	<summary>
 Gets or sets the Cash Only Timeout value.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The timeout value determines the length of time, in seconds, the
 SPM should wait for a response from the host before returning a pseudo response
 when the transaction is a Cash Only transaction.
 </remarks>
</member><member name="P:SPM.Request.ReceiptTextMaxLimit">
	<summary>
 Gets/Sets the maximum length that the Response.ReceiptText property should return.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>A value of 0 or less will provide the ReceiptText without limitations.</remarks>
</member><member name="M:SPM.Request.LogMessage(System.String)">
	<summary>
 Writes a message to the SPM's log.
 </summary>
	<param name="message">The message to log.</param>
	<remarks></remarks>
</member><member name="M:SPM.Request.RegisterCardWatcher(SPM.CardWatcher)">
	<summary>
 Registers a card watcher to the collection of cards
 </summary>
	<param name="listener">The card watcher listener to register.</param>
	<remarks></remarks>
</member><member name="M:SPM.Request.RepairEMVSetup(System.Boolean)">
	<summary>
 Performs EMV Setup Repair including updating PinKey, downloading EMV parameters and device setup with new EMV parameters.
 </summary>
	<param name="onlyUpdatePinkey">Sets whether to only update the pin key as boolean.</param>
	<returns>Whether the setup has completed successfully</returns>
	<remarks></remarks>
</member><member name="M:SPM.Request.PerformMaintenance">
	<summary>
 Performs EMV Maintenance including updating PinKey, downloading EMV parameters as well as full device setup with new EMV parameters
 It may take up to 5 Mins to fully complete
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Request.Clear">
	<summary>
 Clear properties of the Request object to setup for an additional call
 </summary>
	<remarks>
 RequestID is reset to a new ID
 Items cleared are:
 ClerkID
 RawRequest
 RawResponse
 Order
 Response
 Error collection
 Card collection
 NewCard
 OldCard
 PromoCard
 </remarks>
</member><member name="M:SPM.Request.ClearDisplay">
	<summary>
 Reset the MagTek IPAD device back to 'Welcome' or the 'Subway' logo
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Request.DisplayFail">
	<summary>Display the 'Failed' message on the MagTek IPAD device.</summary>
</member><member name="M:SPM.Request.DisplayTimeout">
	<summary>Display the 'Timeout' message on the MagTek IPAD device.</summary>
</member><member name="M:SPM.Request.ClearCouponCache">
	<summary>
 Clears the cache of any coupon information
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Request.IsReady(SPM.SpmEnums.RequestTypes)">
	<summary>
 A method to check to see if all properties have been set properly before making a
 call to the host. Note: it is not required for the POS to call this function before
 calling one of the other methods. However, it can aid in determining if all
 appropriate properties have been set.
 </summary>
	<param name="typeOfRequest">The type of request to perform.</param>
	<returns>True if all required elements are present, otherwise false</returns>
	<remarks>If false is returned, check the Errors collection or the LastError object
 for the items that are missing.</remarks>
</member><member name="M:SPM.Request.VerifyDigitalOffer(System.String)">
	<summary>
 Verifies a digital offer. (Deprecated)
 </summary>
	<param name="coupon">The offer to verify.</param>
	<returns>The result as string.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Request.BalanceInquiry(SPM.Card@)">
	<summary>
 Obtains the balance of a Subway Card using Direct Device prompting.
 </summary>
	<param name="card">The card to perform a balance inquiry on.</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.PhoneNumberLookUp(System.String)">
	<summary>
 Obtains the collection of SubwayCard by looking up the customer phone number through the host
 </summary>
	<param name="phoneNumber"> The phone number to perform a phone number look up.</param>
	<returns>
		<para>The <see cref="P:SPM.Request.Cards">Cards</see> objects collection with the given MDMID, FirstName and LastName.</para>
		<para>Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.CouponInquiry(SPM.Coupon@)">
	<summary>
 Obtains the coupon data.
 </summary>
	<param name="coupon">The coupon to perform a coupon inquiry on.</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.PingTest">
	<summary>
 A function that queries the host to be sure there is a connection.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.ValidateUsername(System.String)">
	<summary>
 Validates that the current username with the password provided is authenticated at the host.
 </summary>
	<param name="testPassword">the password used to validate the username</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer than the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.UpdateStoreID(System.String)">
	<summary>
 Updates the SPM Store Number with the provided value. A dialog box will be presented to request a password.
 The store number and password will be validated at the host for a successful change.
 </summary>
	<param name="storeNumber">The new store number</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer than the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.ProcessRawRequest(System.String)">
	<summary>
 Send the raw XML to the host.  This is to be used in dev and test purposes only.
 </summary>
	<param name="sXml">The XMl to send to the host.</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.InvalidOperationException">This function is available in TestMode only. The operation
 will fail with this exception if in production mode.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.Transfer(SPM.Card@,SPM.Card@)">
	<summary>
 To transfer the information from one card to the second using Direct Device prompting.
 </summary>
	<param name="newCard">The new card to transfer to.</param>
	<param name="oldCard">The old card to transfer from.</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.ProcessRetry">
	<summary>
 To process an order through the system, when it had failed on the previous attempt.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail.</exception>
</member><member name="M:SPM.Request.ProcessOrder">
	<summary>
 To process an order through the system.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.VoidOrder">
	<summary>
 Voids an order that was previously submitted.
 Upon a successful return check the <see cref="T:SPM.Payments"/> collection for credit card/debit card items.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
</member><member name="M:SPM.Request.VoidOrder(System.String)">
	<summary>
 Voids an order by orderID.
 Upon a successful return check the <see cref="T:SPM.Payments"/> collection for credit card/debit card items.
 </summary>
	<param name="orderID">The orderID to void.</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
</member><member name="M:SPM.Request.VoidOrderAlternate(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
	<summary>
 Voids an mobile order by orderID.
 Upon a successful return check the <see cref="T:SPM.Payments"/> collection for credit card/debit card items.
 </summary>
	<param name="orderID">The orderID to void.</param>
	<param name="transactionData">The transaction data of the mobile order.</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
</member><member name="M:SPM.Request.VoidOrder(System.String,System.Boolean)">
	<summary>
 Voids an order that was previously submitted.
 Upon a successful return check the <see cref="T:SPM.Payments"/> collection for credit card/debit card items.
 </summary>
	<param name="orderID">The order ID previously returned by the host.</param>
	<param name="postCloseAdjustment">Whether to post close adjustment or not.</param>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.VoidAdjustOrder">
	<summary>
 Voids an order that was previously submitted.
 Upon a successful return check the <see cref="T:SPM.Payments"/> collection for credit card/debit card items.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.FreezeCard">
	<summary>
 To freeze a card using Direct Device prompting.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<remarks>This is available in TestMode only.</remarks>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.InvalidOperationException">This function is available in TestMode only. The operation
 will fail with this exception if in production mode.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail</exception>
</member><member name="M:SPM.Request.UnFreezeCard">
	<summary>
 To un-freeze a card using Direct Device prompting.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.InvalidOperationException">This function is available in TestMode only. The operation
 will fail with this exception if in production mode.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.AddAccountAlias">
	<summary>
 A method that associates an alternate ID or "Alias" with a given card number using Direct Device
 prompting.
 </summary>
	<remarks>This is available in TestMode only.</remarks>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception caption="" cref="T:System.InvalidOperationException">This function is available in TestMode only. The operation
 will fail with this exception if in production mode.</exception>
	<exception caption="" cref="T:System.ApplicationException">When the user cancels while collecting card data, the operation will
 fail with this exception.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.RemoveAccountAlias">
	<summary>
 A method that disassociates an alternate ID or 'Alias' with Subway card.
 </summary>
	<returns>
		<para>False - an exception was thrown during the operation. Check the <see cref="P:SPM.Request.Errors"/> collection for what went wrong.</para>
		<para>True - The operation successfully communicated with the host processor. Check the <see cref="P:SPM.Request.Response"/> as to whether the transaction was
 successful at the host or not.</para>
	</returns>
	<remarks>This is available in TestMode only.</remarks>
	<exception caption="" cref="T:SPM.SpmException">Refer to <see cref="T:SPM.SpmException"/> for more information.</exception>
	<exception cref="T:SPM.TimeoutException">When it takes longer tthan the timeout duration for a complete conversation with
 the host processor the operation will fail.</exception>
	<exception caption="" cref="T:System.InvalidOperationException">This function is available in TestMode only. The operation
 will fail with this exception if in production mode.</exception>
	<exception caption="" cref="T:System.Exception">If any other unanticipated exception is raised the operation will fail
 with this exception.</exception>
</member><member name="M:SPM.Request.ShowAdministrationTool">
	<summary>
 Launches the SPM Configuration Manager application.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Request.LaunchAdmin">
	<summary>
 Launch Configuration Manager
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Request.LogMe">
	<summary>Writes the properties of the response object to the log file.</summary>
</member><member name="T:SPM.Request">
	<projectintroduction>The Payment Manager is used by Point of Sale (POS) software to process Subway Card and Credit/Debit card transactions.</projectintroduction>
	<gettingstarted>words for the getting started topic</gettingstarted>
	<summary>
 The Request object is the main or root object for the Payment Manager. All major features and functions
 hang off this object.
 </summary>
	<remarks>Methods within the Request object return true/false. True indicates that the method was successful in completing. False indicates that the method failed, or
 that some exception was thrown during the operation. In the case of False, the user of the object should check the <see cref="T:SPM.Errors"/> collection for any issues that
 occurred during the operation.</remarks>
</member><member name="F:SPM.Payment.ClassId">
	<exclude/>
</member><member name="F:SPM.Payment.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Payment.EventsId">
	<exclude/>
</member><member name="P:SPM.Payment.TenderType">
	<summary>
 Gets or sets the payment type.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.PaymentMethod">
	<summary>
 Gets or sets the payment method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>See <see cref="T:SPM.SpmEnums.PaymentMethods"/> for default values.</remarks>
</member><member name="P:SPM.Payment.PaymentID">
	<summary>
 Gets or sets the identification or key to the particular payment.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This value must be unique amongst all <see cref="T:SPM.Payment">Payments</see>
 and <see cref="T:SPM.LineItem">LineItems</see> in the order.
 </remarks>
</member><member name="P:SPM.Payment.CurrencyTypeDescription">
	<summary>
 Gets the string representation of the <see cref="P:SPM.Payment.CurrencyType">CurrencyType</see>.
 </summary>
</member><member name="P:SPM.Payment.Currency">
	<summary>
 Gets or sets the currency.
 </summary>
	<value>The currency.</value>
	<remarks></remarks>
</member><member name="P:SPM.Payment.CurrencyType">
	<summary>
 Gets or sets the type of currency the payment uses.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>See <see cref="T:SPM.Currency"/> Overview for possible values. </remarks>
</member><member name="P:SPM.Payment.Failed">
	<summary>
 Read-only. Denotes that this payment was processed at the host, but was not accepted.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.FailedNullable">
	<summary>
 Read-Only.
 True indicates that this payment was processed at the host, but was not accepted.
 False indicates that this payment was processed at the host, and was accepted.
 Null indicates that the result of this payment has not yet been determined.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.Coupon">
	<summary>
 This is the <see cref="P:SPM.Payment.Coupon"/> object for the payment.
 </summary>
</member><member name="P:SPM.Payment.Certificate">
	<summary>
 This is the <see cref="P:SPM.Payment.Certificate"/> object for the payment.
 </summary>
</member><member name="P:SPM.Payment.ReferenceNo">
	<summary>
 Gets ot sets the reference number for use during receipt printing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.ApprovalNo">
	<summary>
 Gets or sets the approval number for use during receipt printing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.TraceNo">
	<summary>
 Gets or sets the trace number for use during receipt printing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.Card">
	<summary>
 This is the <see cref="P:SPM.Payment.Card"/> object for the payment.
 This is created during the processing phase.
 </summary>
</member><member name="P:SPM.Payment.ShortAmount">
	<summary>
 Get the amount that the payment is short.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.RequestedAmount">
	<summary>
 Gets the amount of an original request
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.HasBeenAdjusted">
	<summary>Read-only. Designates whether this card has ever been adjusted in any transaction.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Payment.IsAdjusted">
	<summary>
 Gets the value to determine if this card was adjusted at the host for the last request
 </summary>
	<value></value>
	<returns></returns>
	<remarks>A card is adjusted at the host
 if there is insufficient balance on the card for the original amount requested.  The host
 will deduct the remaining balance on the card.  The caller can check the
 <see cref="P:SPM.Card.RequestedAmount"/> to see what was originally requested.
 The <see cref="P:SPM.Card.Amount"/> property now holds the amount that was deducted from the card.
 </remarks>
</member><member name="P:SPM.Payment.Amount">
	<summary>
 Gets or sets the amount of money or points the payment represents.
 This is the extended value not the per each value.
 </summary>
	<remarks>Note: on an adjusted order this amount is modified to reflect the actual amount of the
 payment.  See <see cref="P:SPM.Payment.RequestedAmount">RequestedAmount</see> for the original requested amount.</remarks>
</member><member name="P:SPM.Payment.TipAmount">
	<summary>
 Gets the tip amount as Decimal.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.HasBeenProcessed">
	<summary>
 Gets
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Payment.AcceptNSF">
	<summary>
 Gets or sets whether this payment line will allow NSF transactions.
 </summary>
	<value>Determines whether this payment line will allow NSF transactions.</value>
	<returns>Boolean representing whether this payment line will allow NSF transactions.</returns>
</member><member name="M:SPM.Payment.PartialClear">
	<summary>
 Clears all payments of the card that represent this payment.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Payment.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">The title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="M:SPM.Payment.LogMe">
	<summary>
 Logs me.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Payment.GetCardData(System.Boolean)">
	<summary>
 Obtains the card data for this payment.
 </summary>
	<param name="isVoid">Set to True if the order is going to be voided</param>
	<returns>True if the card data was successfully obtained. False if the user cancelled.</returns>
	<remarks>In order for teh GetCardData to work properly certain properties must
 have already been set. They are:
 <list>
			<item>Amount - the amount of the payment</item>
			<item>Payment Method - Whether this is Credit, Debit, Gift or Rewards</item>
			<item>Currency - Whether this is for USD or CAD or Points</item>
		</list>
	</remarks>
	<exception cref="T:SPM.SpmException">An SPM Exception is raised if the payment hasn't been setup
 properly prior to this call.</exception>
</member><member name="M:SPM.Payment.GetCardData(System.Boolean,System.Boolean)">
	<summary>
 Obtains the card data for this payment.
 </summary>
	<param name="isVoid">Set to True if the order is going to be voided</param>
	<param name="tipPrompt">Set to True if prompt for tips should be enabled.</param>
	<returns>True if the card data was successfully obtained. False if the user cancelled.</returns>
	<remarks>In order for teh GetCardData to work properly certain properties must
 have already been set. They are:
 <list>
			<item>Amount - the amount of the payment</item>
			<item>Payment Method - Whether this is Credit, Debit, Gift or Rewards</item>
			<item>Currency - Whether this is for USD or CAD or Points</item>
		</list>
	</remarks>
	<exception cref="T:SPM.SpmException">An SPM Exception is raised if the payment hasn't been setup
 properly prior to this call.</exception>
</member><member name="M:SPM.Payment.GetCardData">
	<summary>
 Obtains the card data for this payment.
 </summary>
	<returns>True if the card data was successfully obtained. False if the user cancelled.</returns>
	<remarks>In order for teh GetCardData to work properly certain properties must
 have already been set. They are:
 <list>
			<item>Amount - the amount of the payment</item>
			<item>Payment Method - Whether this is Credit, Debit, Gift or Rewards</item>
			<item>Currency - Whether this is for USD or CAD or Points</item>
		</list>
	</remarks>
	<exception cref="T:SPM.SpmException">An SPM Exception is raised if the payment hasn't been setup
 properly prior to this call.</exception>
</member><member name="M:SPM.Payment.SetCard(SPM.Card)">
	<summary>
 A method to set the <see cref="P:SPM.Payment.Card"/> property. Created for COM clients
 that can't set the property directly.
 </summary>
	<param name="card">The <see cref="P:SPM.Payment.Card"/> object related to this line item.</param>
	<remarks></remarks>
</member><member name="M:SPM.Payment.SetCoupon(SPM.Coupon)">
	<summary>
 A method to set the <see cref="P:SPM.Payment.Coupon"/> property. Created for COM clients
 that can't set the property directly.
 </summary>
	<param name="coupon">The <see cref="P:SPM.Payment.Coupon"/> object related to this line item.</param>
	<remarks></remarks>
</member><member name="M:SPM.Payment.SetCertificate(SPM.Certificate)">
	<summary>
 A method to set the <see cref="P:SPM.Payment.Certificate"/> property. Created for COM clients
 that can't set the property directly.
 </summary>
	<param name="certificate">The <see cref="P:SPM.Payment.Certificate"/> object related to this line item.</param>
	<remarks></remarks>
</member><member name="M:SPM.Payment.PostClear">
	<summary>
 Clears certain fields from payments for multiple transactions
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Payment.op_Equality(SPM.Payment,SPM.Payment)">
	<summary>
 Overrides the equality operator.  Compares on the PaymentID only.
 </summary>
	<param name="lhs">First payment to compare.</param>
	<param name="rhs">Second payment to compare.</param>
	<returns>Returns true if the payments ids are the same.</returns>
</member><member name="M:SPM.Payment.op_Inequality(SPM.Payment,SPM.Payment)">
	<summary>
 Overrides the inequality operator. Compares on the PaymentID only.
 </summary>
	<param name="lhs">First payment to compare.</param>
	<param name="rhs">Second payment to compare.</param>
	<returns>Returns true if the payment ids are not the same.</returns>
</member><member name="T:SPM.Payment">
	<summary>
 Contains the attributes of each Payment in an order.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Order.ClassId">
	<exclude/>
</member><member name="F:SPM.Order.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Order.EventsId">
	<exclude/>
</member><member name="T:SPM.Order.NotReadyOrder">
	<exclude/>
</member><member name="P:SPM.Order.IsRejected">
	<summary>
 Reflects whether or not the transaction was declined by Host or the ICC in EMV transactions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.MainTransactionIndex">
	<summary>
 Main transaction index in the Order.Transactions property
 Host Order ID of Order object will be the Host Order ID of the main transaction
 The Main transaction could be used for claming points that is earned from the order
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.Description">
	<summary>
 Gets or sets the description of the order as defined by the POS.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.HostOrderDate">
	<summary>
 Gets the date the transaction was processed at the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.HostOrderTime">
	<summary>
 Gets the time the transaction was processed at the host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.Transactions">
	<summary>
 Gets or sets the list of transactions.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.IsAdjusted">
	<summary>
 Denotes if a Cash Card was adjusted at the host or not during the last request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.HasBeenAdjusted">
	<summary>
 Denotes whether this order has ever been adjusted or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.AdjustedOrderId">
	<summary>
 Gets ot sets the adjusted order id.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.LineItems">
	<summary>
 Read-only. A collection of line item objects for the order. See <see cref="P:SPM.Order.LineItems">LineItems</see> for more information.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.AddValues">
	<summary>
 Read-only. A collection of add value objects for the order. These represent adding value to a cash card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.Note">
	<summary>
 A string returned by the host for the order. This property is obsolete.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.OrderDate">
	<summary>
 Gets and sets the local date and time of the order as determined by the POS.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.OrderID">
	<summary>
		<br>The order id returned from the host.</br>
		<br>This is the number that will be needed to void an order</br>
		<br>If mulitple hosts are used in the same order, the OrderID will be the order id of</br>
		<br>the main transaction, such as IOU transaction and Online Cash Transaction</br>
	</summary>
	<value></value>
	<returns></returns>
	<remarks>This is also sometimes referred to as the Host Order Id.</remarks>
</member><member name="P:SPM.Order.VoidReferenceNumber">
	<summary>
 The Void Reference Number that is used for voiding the whole order.
 This number may be used to void IOU transaction, Online Cash Transaction, etc
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Void Reference numbers from each Card object may also need to be submitted</remarks>
</member><member name="P:SPM.Order.PointsClaimNumber">
	<summary>
 PointsClaimNumber that POS can use to print IOU receipts
 </summary>
	<value></value>
	<returns></returns>
	<remarks>If the order can be used for claiming points this will be set</remarks>
</member><member name="P:SPM.Order.Payments">
	<summary>
 Read-only. Gets the collection of <see cref="T:SPM.Payment">Payment</see> objects for the order.
 See the <see cref="P:SPM.Order.Payments">Payments</see> for a description of properties and methods available.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.TransNumber">
	<summary>
 Gets or sets the transaction or ticket number as assigned by the POS system.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.ReceiptText(SPM.SpmEnums.ReceiptTypes)">
	<summary>
 Gets an approved format of the receipt contents, including Subway(R) Card balances and activity,
 Credit/Debit card certification block, and promotional messages from the host.
 </summary>
	<param name="ReceiptType">Designates the type of receipt to print.
 <list><see cref="F:SPM.SpmEnums.ReceiptTypes.Default">Default</see> - returns the receipt text
 without 'Merchant Copy' or 'Customer Copy'</list>
		<list><see cref="F:SPM.SpmEnums.ReceiptTypes.Merchant">Merchant</see> - returns the receipt text
 with 'Merchant Copy' under the Credit/Debit card certification section.
 </list>
		<list><see cref="F:SPM.SpmEnums.ReceiptTypes.Customer">Merchant</see> - returns the receipt text
 with 'Customer Copy' under the Credit/Debit card certification section.
 </list>
	</param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.ReceiptBarcodeBitmap">
	<summary>
 Gets a QR-Code for this store/order.
 </summary>
	<value></value>
	<returns>Barcode as a Bitmap or Nothing if the Order is not ready</returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.ReceiptBarcodeBytes">
	<summary>
 Gets a QR-Code for this store/order.
 </summary>
	<value></value>
	<returns>Barcode as a byte array or Nothing if the Order is not ready</returns>
	<remarks></remarks>
</member><member name="M:SPM.Order.SaveReceiptBarcode(System.String)">
	<summary>
 Call this method to have the barcode saved to disk in the filepath provided.
 </summary>
	<param name="filepath">The filepath to save the receipt barcode to.</param>
	<returns>A return of TRUE indicates the file was saved without error. A return of FALSE indicates
 there was an error in saving the barcode to file.
 </returns>
	<remarks>The path must exist. If the file exists it will be overwritten</remarks>
</member><member name="P:SPM.Order.OrderAmount">
	<summary>
 Read-only. Gets the total amount of payments for the order.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.ShortAmount">
	<summary>
 The amount an order is short, when it has been adjusted.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Order.SetPointsClaimNumber(System.String)">
	<summary>
 PointsClaimNumber Setter
 </summary>
</member><member name="P:SPM.Order.Errors">
	<summary>
 Gets the collection of <see cref="P:SPM.Order.Error">Errors</see> that occurred during the call
 to one of the Request methods.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Order.Error">
	<summary>
 Gets the last <see cref="P:SPM.Order.Error">Error</see> that occurred during processing.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Order.GenerateBarcodeBytes(System.String)">
	<summary>
 Generates a barcode for the given order ID and returns it as a byte array
 </summary>
	<param name="orderID">The Order ID to encode into the Barcode.</param>
	<returns>A byte array representing the bitmap.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Order.GenerateBarcodeBitmap(System.String)">
	<summary>
 Generates a barcode for the given order ID and returns it as a bitmap
 </summary>
	<param name="orderID">OrderID to encode in the bitmap.</param>
	<returns>A bitmap containing the barcode.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Order.SaveBarcodeBitmap(System.String,System.String)">
	<summary>
 Saves a bitmap in the filepath location for the orderID provided
 </summary>
	<param name="orderID">The ID for the order to print the barcode</param>
	<param name="filepath">The full path of the bitmap.</param>
	<returns>True if the operation succeeded, false otherwise.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Order.AddTax(System.Double,System.Int32)">
	<summary>
 Adds the appropriate entries to the order to process the tax amount.
 </summary>
	<param name="amount">The total amount of tax to be paid for the order.</param>
	<param name="currencyType">The type of currency for the tax, expressed as an integer,
 useful for POS Software that can't use .Net enums.</param>
	<remarks></remarks>
</member><member name="M:SPM.Order.AddTax(System.Double,SPM.Currency)">
	<summary>
 Adds the appropriate entries to the order to process the tax amount.
 </summary>
	<param name="amount">The total amount of tax to be paid for the order.</param>
	<param name="currency">The type of currency for the tax.</param>
	<remarks></remarks>
</member><member name="T:SPM.Order">
	<summary>
 A class to keep track of all the elements in an order.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.LineItems.ClassId">
	<exclude/>
</member><member name="F:SPM.LineItems.InterfaceId">
	<exclude/>
</member><member name="F:SPM.LineItems.EventsId">
	<exclude/>
</member><member name="M:SPM.LineItems.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.LineItems"/> class.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.LineItems.Add(System.Int32)">
	<summary>
 Adds a new <see cref="T:SPM.LineItem"/> to the collection with the given ID.
 </summary>
	<param name="lineItemID">The ID of the item.  This will be used as the Key.
 </param>
	<returns>
 The newly created <see cref="T:SPM.LineItem"/>. If an item with this ID already exists
 then the original item is returned.
 </returns>
	<remarks></remarks>
</member><member name="M:SPM.LineItems.AddLineItem(SPM.LineItem)">
	<summary>
 Adds a new <see cref="T:SPM.LineItem"/> to the collection.
 </summary>
	<param name="li">The <see cref="T:SPM.LineItem"/> object to add.</param>
	<remarks></remarks>
	<exception cref="T:System.ApplicationException">If an <see cref="T:SPM.LineItem"/> with the ID already exists an exception will be thrown.</exception>
</member><member name="M:SPM.LineItems.NewLineItem">
	<summary>
 Creates a new <see cref="T:SPM.LineItem"/> object. It does not add the object to the collection.
 </summary>
	<returns>A blank <see cref="T:SPM.LineItem"/> object.</returns>
	<remarks></remarks>
</member><member name="M:SPM.LineItems.Remove(System.Int32)">
	<summary>
 Removes a <see cref="T:SPM.LineItem"/> from the <see cref="T:SPM.LineItems"/> collection
 </summary>
	<param name="lineItemID">The ID of the line item to remove.</param>
	<remarks></remarks>
</member><member name="M:SPM.LineItems.FindByID(System.Int32)">
	<summary>
 Looks through the collection and returns the <see cref="T:SPM.LineItem"/> with the given ID.
 </summary>
	<param name="lineItemID">The ID used for the lookup.</param>
	<returns>
 If the ID is found the <see cref="T:SPM.LineItem"/>, if not found then the value of Nothing.
 </returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItems.MaxLineItemID">
	<summary>Gets the largest LineItemID in the collection.</summary>
</member><member name="P:SPM.LineItems.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.LineItem"/> object at the requested index.</summary>
</member><member name="M:SPM.LineItems.AddObject(SPM.LineItem)">
	<summary>Adds an <see cref="T:SPM.LineItem"/> object to the collection.</summary>
	<returns>Returns the index of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.LineItem"/> object to add to the collection.
 </param>
</member><member name="P:SPM.LineItems.Count">
	<summary>
 Gets the number of <see cref="T:SPM.LineItem">LineItems</see> in the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.LineItems">
	<summary>
 A collection of <see cref="T:SPM.LineItem">LineItem</see> objects.
 </summary>
	<remarks></remarks>
	<moduleiscollection/>
</member><member name="F:SPM.LineItem.ClassId">
	<exclude/>
</member><member name="F:SPM.LineItem.InterfaceId">
	<exclude/>
</member><member name="F:SPM.LineItem.EventsId">
	<exclude/>
</member><member name="P:SPM.LineItem.AddOns">
	<summary>
 Keeps track of ad-hoc items that a POS may want to add to each line item
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.Amount">
	<summary>
 The amount of money or points the line item represents.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.OriginalPrice">
	<summary>
 The original price of the line item.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.Card">
	<summary>
 This is the <see cref="P:SPM.LineItem.Card"/> object for the line item.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.CouponCode">
	<summary>
 Gets or sets the Coupon Code for this line item
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.CouponUPC">
	<summary>
 Gets or sets the Coupon UPC as established by corporate for this line item
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.CurrencyType">
	<summary>
 Gets or sets the type of currency the line item uses.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>See <see cref="T:SPM.Currency"/> Overview for possible values. </remarks>
</member><member name="P:SPM.LineItem.Currency">
	<summary>
 Gets or sets the currency.
 </summary>
	<value>The currency.</value>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.CurrencyTypeDescription">
	<summary>
 Gets the string representation of the <see cref="P:SPM.LineItem.CurrencyType">CurrencyType</see>.
 </summary>
</member><member name="P:SPM.LineItem.OriginalPriceCurrency">
	<summary>
 Gets or sets the currency.
 </summary>
	<value>The currency.</value>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.Description">
	<summary>
 Gets or sets the description of the line item.  This can be what ever the POS desires.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LineItem.LineItemID">
	<summary>
 Gets or sets the identification or key to the particular line item.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This value must be unique amongst all <see cref="T:SPM.LineItem">LineItems</see>
 and <see cref="T:SPM.Payment">Payments</see> in the order.
 </remarks>
</member><member name="P:SPM.LineItem.LineItemType">
	<summary>
 Gets or sets the type of line item this is.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>See <see cref="T:SPM.SpmEnums.LineItemTypes"/> for possible values.</remarks>
</member><member name="P:SPM.LineItem.PLU">
	<summary>
 Gets or sets the PLU of the line item. This is sometimes referred to as the SKU.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>PLU - Price Lookup Unit<br/>SKU - Stock Keeping Unit</remarks>
</member><member name="P:SPM.LineItem.Quantity">
	<summary>
 Gets or sets the quantity of the PLU being purchased.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.LineItem.SetCard(SPM.Card)">
	<summary>
 A method to set the <see cref="P:SPM.LineItem.Card"/> property. Created for COM clients
 that can't set the property directly.
 </summary>
	<param name="card">The <see cref="P:SPM.LineItem.Card"/> object related to this line item.</param>
	<remarks></remarks>
</member><member name="M:SPM.LineItem.SetOriginalPrice(System.Double,SPM.Currency)">
	<summary>
 A method to set the <see cref="P:SPM.LineItem.Card"/> property. Created for COM clients
 that can't set the property directly.
 </summary>
	<param name="originalPrice"> the original price of the line item</param>
	<param name="originalCurrency"> the currency of the original price of the line item</param>
	<remarks></remarks>
</member><member name="M:SPM.LineItem.LogMe">
	<summary>
 Logs me.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.LineItem.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">Title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="T:SPM.LineItem">
	<summary>
 Tracks the attributes of PLU items as well as the means to add value to a Cash Card.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Crypto.PassPhrase">
	<summary>
 The 'Key' to encrypt or decrypt data.  The same passPhrase must be used decrypt
 data that was used to encrypt the data.
 </summary>
	<value>A common password or saying.</value>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.EncryptTextToFile(System.String,System.String)">
	<summary>
 Encrypts a string and writes it to a file.
 </summary>
	<exception cref="T:System.Security.Cryptography.CryptographicException" caption="">An error occurred while encrypting the data</exception>
	<param name="data">The data to be encrypted</param>
	<param name="fileName">The full path to the file to be decrypted.</param>
</member><member name="M:SPM.Crypto.EncryptTextToFile(System.String,System.String,SPM.EncryptionAlgorithmConstants)">
	<summary>
 Encrypts a string and writes it to a file.
 </summary>
	<exception cref="T:System.Security.Cryptography.CryptographicException" caption="">An error occurred while encrypting the data</exception>
	<param name="data">The data to be encrypted</param>
	<param name="fileName">The full path to the file to be decrypted.</param>
	<param name="encryptionAlgorithm">The encryption algorithm to use.</param>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.EncryptTextToString(System.String)">
	<summary>
 Encrypts a string and returns the encrypted string.
 </summary>
	<param name="data">The data to be encrypted</param>
	<returns>The encrypted data as a string</returns>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.EncryptTextToString(System.String,SPM.EncryptionAlgorithmConstants)">
	<summary>
 Encrypts a string and returns the encrypted string using the encryption algorithm provided.
 </summary>
	<param name="data">The data to be encrypted</param>
	<param name="encryptionAlgorithm"></param>
	<returns>The encrypted data as a string</returns>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.EncryptTextToStream(System.String,System.IO.Stream@,SPM.EncryptionAlgorithmConstants)">
	<summary>
 Encrypts a string and writes it to a given stream
 </summary>
	<param name="data">The data to be encrypted</param>
	<param name="outStream"></param>
	<param name="encryptionAlgorithm">The encryption algorithm to use.</param>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.DecryptTextFromFile(System.String)">
	<summary>
 Decrypts a file and returns a string. The file must have been encrypted 
 using this class as well, using the 'hard-coded' keys.
 </summary>
	<param name="fileName">The full path to the file to be decrypted.</param>
	<returns>The contents of the file decrypted as a string.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.DecryptTextFromFile(System.String,SPM.EncryptionAlgorithmConstants)">
	<summary>
 Decrypts a file and returns a string. The file must have been encrypted 
 using this class as well, using the 'hard-coded' keys.
 </summary>
	<param name="fileName">The full path to the file to be decrypted.</param>
	<param name="encryptionAlgorithm">The algorithm to use to decrypt the contents of the file.</param>
	<returns>The contents of the file decrypted as a string.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.DecryptTextFromString(System.String)">
	<summary>
 Decrypts a string and returns a string.
 </summary>
	<param name="data">The encrypted string.</param>
	<returns>The string in plain text</returns>
	<remarks></remarks>
</member><member name="M:SPM.Crypto.DecryptTextFromString(System.String,SPM.EncryptionAlgorithmConstants)">
	<summary>
 Decrypts a string and returns a string using the encrypted algorithm designated.
 </summary>
	<param name="data">The encrypted string.</param>
	<param name="encryptionAlgorithm"></param>
	<returns>The string in plain text</returns>
	<remarks></remarks>
</member><member name="T:SPM.Crypto">
	<summary>A class used for encryption/decryption.</summary>
</member><member name="F:SPM.Error.ClassId">
	<exclude/>
</member><member name="F:SPM.Error.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Error.EventsId">
	<exclude/>
</member><member name="P:SPM.Error.ErrorMessage">
	<summary>
 The description of the error.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Error.ErrorCode">
	<summary>A code that provides a general description of the error.</summary>
</member><member name="P:SPM.Error.ErrorType">
	<summary>The type of error that occurred.</summary>
</member><member name="M:SPM.Error.GetErrorMessage(System.Int32)">
	<summary>
 Gets the error message.
 </summary>
	<param name="width">The width.</param>
	<returns>Returns a string containing the error message.</returns>
	<remarks></remarks>
</member><member name="T:SPM.Error">
	<summary>
 An object that describes an error that occurred in the Payment Manager
 processing.
 </summary>
</member><member name="F:SPM.SpmException.ClassId">
	<exclude/>
</member><member name="F:SPM.SpmException.InterfaceId">
	<exclude/>
</member><member name="F:SPM.SpmException.EventsId">
	<exclude/>
</member><member name="M:SPM.SpmException.#ctor">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.SpmException.#ctor(System.String)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.SpmException.#ctor(System.String,System.Exception)">
	<exclude/>
	<excludetoc/>
</member><member name="P:SPM.SpmException.Message">
	<summary>Gets a message that describes the current exception.</summary>
</member><member name="P:SPM.SpmException.StackTrace">
	<summary>
 Gets a string representation of the frames on the call stack at the time the
 current exception was thrown.
 </summary>
</member><member name="M:SPM.SpmException.ToString">
	<summary>
 Overridden. Creates and returns a string representation of the current
 exception.
 </summary>
	<returns>A string representing the SPMException.</returns>
</member><member name="P:SPM.SpmException.ErrorType">
	<summary>Gets the Error Type for the error.</summary>
</member><member name="M:SPM.SpmException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Gets the object data.	
 </summary>
	<param name="info">The info.</param>
	<param name="context">The context.</param>
	<remarks></remarks>
</member><member name="T:SPM.SpmException">
	<summary>A class to represent a generic Payment Manager Exception</summary>
	<remarks>
		<para>The SPM Exception is thrown in the following situations:</para>
		<list type="bullet">
			<item>When using the <see cref="T:SPM.Card"/> object and attempting to collect card information without first setting a valid Card Purpose.</item>
			<item>When setting the <see cref="P:SPM.Payment.Amount"/> property for a payment that has been adjusted.</item>
			<item>When calling the <see cref="M:SPM.Request.ProcessRetry"/> method for an <see cref="T:SPM.Order"/> that has been adjusted.</item>
			<item>When calling the <see cref="M:SPM.Request.VoidAdjustOrder"/> method for an <see cref="T:SPM.Order"/> that has NOT been adjusted.</item>
			<item>When calling one of the 'Transaction' methods for <see cref="T:SPM.Request"/> and
 
        <ul><li>The size of the XML has exceeded the maximum size.</li><li>The dialer is used and a modem isn't connected.</li><li>The request type is not known.</li></ul></item>
		</list>
	</remarks>
</member><member name="F:SPM.TimeoutException.ClassId">
	<exclude/>
</member><member name="F:SPM.TimeoutException.InterfaceId">
	<exclude/>
</member><member name="F:SPM.TimeoutException.EventsId">
	<exclude/>
</member><member name="M:SPM.TimeoutException.#ctor">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.TimeoutException.#ctor(System.String)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.TimeoutException.#ctor(System.String,System.Exception)">
	<exclude/>
	<excludetoc/>
</member><member name="P:SPM.TimeoutException.Message">
	<summary>Gets a message that describes the current exception.</summary>
</member><member name="P:SPM.TimeoutException.StackTrace">
	<summary>
 Gets a string representation of the frames on the call stack at the time the
 current exception was thrown.
 </summary>
</member><member name="M:SPM.TimeoutException.ToString">
	<summary>
 Overridden. Creates and returns a string representation of the current
 exception.
 </summary>
	<returns>Returns a string representing the TimeoutException.</returns>
</member><member name="T:SPM.TimeoutException">
	<summary>A class to hold the Timeout Exception.</summary>
</member><member name="F:SPM.Currency.ClassId">
	<exclude/>
</member><member name="F:SPM.Currency.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Currency.EventsId">
	<exclude/>
</member><member name="F:SPM.Currency.Unknown">
	<summary>
 The default currency of an item when created.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Currency.Points">
	<summary>
 The payment or line item is for a Rewards card and uses points.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Currency.USD">
	<summary>
 The payment or line item uses US Dollars
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Currency.CAD">
	<summary>
 The payment or line item uses Canadian Dollars
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Currency.AUD">
	<summary>
 The payment or line item uses Australian Dollars
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Currency.GBP">
	<summary>
 The payment or line item uses Great Britain Pounds
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Currency.EUR">
	<summary>
 The payment or line item uses Euros
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Currency.Tokens">
	<summary>
 The payment or line item uses Euros
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Currency.ID">
	<summary>
 Gets the ID.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.Currency.Name">
	<summary>
 Gets the name.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.Currency.Divisor">
	<summary>
 Gets the divisor.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.Currency.Index">
	<summary>The index into the internally stored array.</summary>
	<exclude/>
	<excludetoc/>
</member><member name="P:SPM.Currency.CurrencySymbol">
	<summary>
 The currency symbol.
 </summary>
	<value></value>
	<returns>A String containing the currency symbol for this object's currency</returns>
	<remarks></remarks>
</member><member name="P:SPM.Currency.ISOCurrencyCode">
	<summary>
 The ISO currency code.
 </summary>
	<value></value>
	<returns>
		<br>
 returns ISO CurrencyCode
 </br>
 returns 0 if currency is unknown
 <br>
 returns 1001 if currency is Points
 </br>
		<br>
 returns 1002 if currency is Tokens
 </br>
	</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.GetCurrency(System.String)">
	<summary>
 Gets the currency.
 </summary>
	<param name="name">The name.</param>
	<returns>The Currency.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.GetCurrency(System.Int32)">
	<summary>
 Gets the currency.
 </summary>
	<param name="id">The id.</param>
	<returns>The Currency.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.GetCurrencySymbol(System.String)">
	<summary>
 Gets the currency.
 </summary>
	<param name="name">The id.</param>
	<returns>The Currency.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.GetCurrencyByCountryID(System.Int32)">
	<summary>
 Gets the currency.
 </summary>
	<param name="countryCode">The country code.</param>
	<returns>The Currency.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.GetCurrencyByCurrencyCode(System.Int32)">
	<summary>
		<br>Gets the currency by ISO currency code.</br>
		<br>'Points = 1001</br>
		<br>'Tokens = 1002</br>
		<br>'GBP = 826,</br>
		<br>'USD = 840,</br>
		<br>'CAD = 124,</br>
		<br>'AUD = 36</br>
		<br>'EURO = 978</br>
	</summary>
	<param name="currencyCode">The ISO currency code.</param>
	<returns>The Currency.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.ToList">
	<summary>
 Gets a list of available currencies.
 </summary>
	<returns>An IList containing the Currency objects.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.DisplayAmount(System.Double)">
	<summary>
 A formatted display for the amount provided.
 </summary>
	<param name="amount">The amount to display.</param>
	<returns>A string representing the amount provided.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.DisplayAmount(System.Double,System.String)">
	<summary>
 A formatted display for the amount provided using the given currency named format.
 </summary>
	<param name="amount">The amount to display.</param>
	<param name="newName">The currency name to use.</param>
	<returns>A string representing the amount provided.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.Load">
	<summary>
 Load the default currency file if it exists and add to the collection of currencies in use
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Currency.ToString">
	<summary>
 Overrides the ToString method to output the ID and Name properties
 </summary>
	<returns>Returns a string representation of the currency.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.Equals(System.Object)">
	<summary>
 Performs the equality operation.
 </summary>
	<param name="value">The value to be compared to the current instance.</param>
	<returns>True if the Currency objects are equal.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.CompareTo(SPM.Currency)">
	<summary>
 Compares two currencies.
 </summary>
	<param name="other">The other Currency to compare to.</param>
	<returns>Returns an indications of the relative values of the Currency IDs.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Currency.op_LessThan(SPM.Currency,SPM.Currency)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.Currency.op_GreaterThan(SPM.Currency,SPM.Currency)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.Currency.op_Equality(SPM.Currency,SPM.Currency)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.Currency.op_Inequality(SPM.Currency,SPM.Currency)">
	<exclude/>
	<excludetoc/>
</member><member name="T:SPM.Currency">
	<summary>
 A class to track the currency for line items and payments
 </summary>
	<remarks>
 Default values are:
 Unknown = 0
 Points = 1
 USD = 2
 CAD = 3
 GBP = 4
 EUR = 5

 Additional currencies can be added by placing the properly formatted SPM.Currency.xml file
 in the same folder as the SPM.DLL.
 </remarks>
</member><member name="F:SPM.AccountStatus.Unknown">
	<summary>
 The status has not been set or can not be determined.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AccountStatus.New">
	<summary>
 The Subway(R) Card has not yet been activated.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AccountStatus.Active">
	<summary>
 The Subway(R) Card is active and currently in use.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AccountStatus.Frozen">
	<summary>
 The Subway(R) Card activity has been frozen. The user will need to contact
 customer service to have the card un-frozen.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AccountStatus.Closed">
	<summary>
 The Subway(R) Card has been closed and can no longer be used for any transactions.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.AccountStatus.ID">
	<summary>
 The ID of the Account Status.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AccountStatus.Name">
	<summary>
 The human readable name of the Account Status.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AccountStatus.LocalizedString">
	<summary>
 The human readable localized string for the Account Status.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AccountStatus.Index">
	<summary>The index into the internally stored array.</summary>
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.AccountStatus.GetAccountStatus(System.String)">
	<summary>
 Get the account status object referenced by the name given.
 </summary>
	<param name="name">The name of the Account Status desired.</param>
	<returns>The desired Account Status or <see cref="F:SPM.AccountStatus.Unknown"/> if not found.</returns>
	<remarks></remarks>
</member><member name="M:SPM.AccountStatus.GetAccountStatus(System.Int32)">
	<summary>
 Gets the account status, using the integer value of the Enum.
 </summary>
	<param name="id">The id.</param>
	<returns>The desired Account Status or <see cref="F:SPM.AccountStatus.Unknown"/> if not found.</returns>
	<remarks>This is useful for POS Software that can't use .Net enums.</remarks>
</member><member name="M:SPM.AccountStatus.ToString">
	<summary>
 A string representation of the Account Status.
 </summary>
	<returns>Will return "[{ID}] {Name}".</returns>
	<remarks></remarks>
</member><member name="M:SPM.AccountStatus.Equals(System.Object)">
	<summary>
 Determines if two difference account statuses are equal.
 </summary>
	<param name="obj">The object to compare to.</param>
	<returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are Nothing, the method returns true.</returns>
	<remarks></remarks>
</member><member name="M:SPM.AccountStatus.CompareTo(SPM.AccountStatus)">
	<summary>
 Compares the current object with an object of the same type.
 </summary>
	<param name="other">The object to compare to.</param>
	<returns>A 32-bit signed integer that indicates the relative order of the comparands.</returns>
	<remarks></remarks>
</member><member name="M:SPM.AccountStatus.op_LessThan(SPM.AccountStatus,SPM.AccountStatus)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.AccountStatus.op_GreaterThan(SPM.AccountStatus,SPM.AccountStatus)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.AccountStatus.op_Equality(SPM.AccountStatus,SPM.AccountStatus)">
	<exclude/>
	<excludetoc/>
</member><member name="M:SPM.AccountStatus.op_Inequality(SPM.AccountStatus,SPM.AccountStatus)">
	<exclude/>
	<excludetoc/>
</member><member name="T:SPM.AccountStatus">
	<summary>
 A class to track the status of Subway Card accounts.
 </summary>
</member><member name="M:SPM.MagTekSimulatedCardData.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
	<exception cref="T:System.ApplicationException">Thrown if not in Test Mode</exception>
</member><member name="P:SPM.MagTekSimulatedCardData.MagneticData">
	<summary>
 Combines Track1 and Track2 as if coming from a keyboard wedge.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.Track1">
	<summary>
 Track1 data as it would come from the MagTek IPAD device
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.Track2">
	<summary>
 Track2 data as it would come from the MagTek IPAD device
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.Track3">
	<summary>
 Track3 data as it would come from the MagTek IPAD device
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.MagnePrintData">
	<summary>
 MagnePrint data as it would come from the MagTek IPAD device or empty string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.MagnePrintStatus">
	<summary>
 MagnePrint status as it would come from the MagTek IPAD device or empty string
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.Track1Encrypted">
	<summary>
 Track1 Encrypted data as it would come from the MagTek IPAD device
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.Track2Encrypted">
	<summary>
 Track2 Encrypted data as it would come from the MagTek IPAD device
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.Track3Encrypted">
	<summary>
 Track3 Encrypted data as it would come from the MagTek IPAD device
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.MSRKSN">
	<summary>
 MSR KSN data as it would come from the MagTek IPAD device
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.WasManuallyEntered">
	<summary>
 Designates if the simulated data was to have been entered manually or swiped.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Data can be manually entered in the IPAD device. Setting this property to TRUE will simulate that the 
 Track1 and Track2 data represent the data returned from the device when entered manually, unless the ManuallyEnteredData
 property is non empty. In this case the ManuallyEnteredData will be used.</remarks>
</member><member name="P:SPM.MagTekSimulatedCardData.AcquiredBy">
	<summary>
 The device the Magtek Simulated card data was acquired by.
 </summary>
</member><member name="T:SPM.MagTekSimulatedCardData">
	<summary>
 A class to be used to submit test MagTek IPAD data through the SPM.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.MobileSimulatedCardData.#ctor">
	<summary>
 Constructor
 </summary>
	<remarks></remarks>
	<exception cref="T:System.ApplicationException">Thrown if not in Test Mode</exception>
</member><member name="P:SPM.MobileSimulatedCardData.Cards">
	<summary>
 The list of cards to be used in the simulated transaction
 </summary>
</member><member name="P:SPM.MobileSimulatedCardData.MobileTransactionID">
	<summary>
 The transaction identifier supplied by the payment host.
 </summary>
</member><member name="P:SPM.MobileSimulatedCardData.MobileCheckoutToken">
	<summary>
 The checkout token used to process the transaction.
 </summary>
</member><member name="P:SPM.MobileSimulatedCardData.VP3HostOrderID">
	<summary>
 The host order ID returned from the simulated payment processor.
 </summary>
</member><member name="P:SPM.MobileSimulatedCardData.AcquiredBy">
	<summary>
 The device the simulated card data was acquired by.
 </summary>
</member><member name="T:SPM.MobileSimulatedCardData">
	<summary>
 A class to be used to submit test Mobile data through the SPM.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.MobileCardInfo.CardType">
	<summary>
 The issuer name of the card
 </summary>
</member><member name="P:SPM.MobileCardInfo.CardLast4">
	<summary>
 The last 4 digits of the card
 </summary>
</member><member name="T:SPM.MobileCardInfo">
	<summary>
 Contains the information of a mobile card.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.VoidDataCollection.Add(SPM.VoidData)">
	<summary>
 add a void payment from the voidData.
 </summary>
	<param name="voidData">The VoidData.</param>
	<remarks></remarks>
</member><member name="M:SPM.VoidDataCollection.AddRange(System.Collections.Generic.List{SPM.VoidData})">
	<summary>
 add a list of void payments from the voidData.
 </summary>
	<param name="voidDatas">The VoidDatas.</param>
	<remarks></remarks>
</member><member name="M:SPM.VoidDataCollection.Remove(System.Int32)">
	<summary>
 Removes a void by index
 </summary>
	<param name="index">The index of the voidData to remove.</param>
	<remarks></remarks>
</member><member name="M:SPM.VoidDataCollection.Remove(System.String)">
	<summary>
 Removes a void by key
 </summary>
	<param name="key">The key of the voidData to remove.</param>
	<remarks></remarks>
</member><member name="M:SPM.VoidDataCollection.Remove(SPM.VoidData)">
	<summary>
 Removes a void by voiddata object
 </summary>
	<param name="voiddata">The voiddata object.</param>
	<remarks></remarks>
</member><member name="T:SPM.VoidDataCollection">
	<moduleiscollection/>
	<summary>A collection of <see cref="T:SPM.VoidData"/>.</summary>
</member><member name="M:SPM.VoidData.#ctor">
	<summary>
 Constructor. Creates a new VoidData object with a unique Key.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.HostOrderID">
	<summary>
 Get/Set HostOrderID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.Key">
	<summary>
 Get/Set Key
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.MDMID">
	<summary>
 Get/Set MDMID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.OriginalTransactionDate">
	<summary>
 Get/Set OriginalTransactionDate
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.Parent">
	<summary>
 Get/Set Parent VoidDataCollection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.Processor">
	<summary>
 Get/Set ProcessorType
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.RequestID">
	<summary>
 Get/Set RequestID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.RRN">
	<summary>
 Get/Set RRN
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.VoidData.TenderAccountID">
	<summary>
 Get/Set coupon id, certificate's serial number, sanitized card number or etc
 for the void transaction
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.VoidData">
	<summary>
 The class that contains all transaction data for void.
 Note: Do not modify any property name or access moifier that already exists
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.TimingInfo._instance">
	<summary>
 Thread safe singleton class that uses the System.Diagnostics.Stopwatch class to track and calculate time in milliseconds.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.TimingInfo.ResetLevel">
	<summary>
 Used to specify the level of timing to reset.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.TimingInfo.Instance">
	<summary>
 This will ensure that this class is a singleton, and only one instance can be used at a time.
 </summary>
	<value></value>
	<returns>TimingInformation</returns>
	<remarks></remarks>
</member><member name="M:SPM.TimingInfo.ResetTimes(System.Int32)">
	<summary>
 Will reset timing values to zero based on the "level" being provided.
 </summary>
	<param name="level">Integer value from 0 to 4. Can use ResetLevel enum too.</param>
	<remarks>This is used to reset the values incase an error happened in the program when timing is being recorded.</remarks>
</member><member name="M:SPM.TimingInfo.GetProcessOrderSetupTime">
	<summary>
 Gets the time difference taken for process order setup.
 </summary>
	<returns>The time taken as Long.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TimingInfo.GetProcessorTransmitTime">
	<summary>
 Gets the time difference taken for vp3 processor transmit.
 </summary>
	<returns>The time taken as Long.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TimingInfo.GetCardDataSetupTime">
	<summary>
 Gets the time difference taken for card data setup.
 </summary>
	<returns>The time taken as Long.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TimingInfo.GetDeviceInputTime">
	<summary>
 Gets the time difference taken for device input.
 </summary>
	<returns>The time taken as Long.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TimingInfo.GetProcessOrderWorkingTime">
	<summary>
 Gets the time difference taken for processing orders.
 </summary>
	<returns>The time taken as Long.</returns>
	<remarks></remarks>
</member><member name="M:SPM.TimingInfo.GetCardDataWorkingTime">
	<summary>
 This function is not used. It will always return zero.
 </summary>
	<returns>Will always return zero.</returns>
	<remarks>This function is not used. It will always return zero.</remarks>
</member><member name="M:SPM.TimingInfo.GetLoyaltyProcessorTransmitTime">
	<summary>
 Gets the time difference taken for SnapLogic processor transmit.
 </summary>
	<returns>The time taken as Long.</returns>
	<remarks></remarks>
</member><member name="T:SPM.TimingInfo">
	<summary>
 This is a singleton class that will keep track and calculate time in milliseconds between check points.
 Call ResetTimers() when an error happens in the class being timed.
 When reading properties, if the value is zero that should indicate that an error happened in the class being timed.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Payments.ClassId">
	<exclude/>
</member><member name="F:SPM.Payments.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Payments.EventsId">
	<exclude/>
</member><member name="M:SPM.Payments.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.Payments"/> class.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Payments.Total">
	<summary>
 Gets the total amount of payments in the collection that are not for points.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>After the return of an adjusted order this will be the amount of payments that have been approved.</remarks>
</member><member name="P:SPM.Payments.MaxPaymentID">
	<summary>Gets the largest PaymentID in the collection.</summary>
</member><member name="P:SPM.Payments.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.Payment"/> object at the requested index.</summary>
</member><member name="M:SPM.Payments.AddObject(SPM.Payment)">
	<summary>Adds an <see cref="T:SPM.Payment"/> object to the collection.</summary>
	<returns>Returns the index of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.Payment"/> object to add to the collection.
 </param>
</member><member name="M:SPM.Payments.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">The title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="M:SPM.Payments.PostClear">
	<summary>
 Clears certain fields from payments for multiple transactions
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Payments.CleanUp">
	<summary>
 Clears certain fields from payments for multiple transactions
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Payments.Add(System.Int32)">
	<summary>
 Adds a new <see cref="T:SPM.Payment"/> to the collection using the given PaymentID as the key.
 </summary>
	<param name="paymentID">The ID that uniquely identifies this payment.</param>
	<returns>Returns the Payment added to the collection.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Payments.AddPayment(SPM.Payment)">
	<summary>
 Adds a new <see cref="T:SPM.Payment"/> to the collection.
 </summary>
	<param name="pay">The <see cref="T:SPM.Payment"/> object to add.</param>
	<remarks></remarks>
	<exception cref="T:System.ApplicationException">If an <see cref="T:SPM.Payment"/> with the ID already exists an exception will be thrown.</exception>
</member><member name="M:SPM.Payments.NewPayment">
	<summary>
 Creates a new <see cref="T:SPM.Payment"/> object. It does not add the object to the collection.
 </summary>
	<returns>A blank <see cref="T:SPM.Payment"/> object.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Payments.PartialClear">
	<summary>
 Clears all payments of the card that represent this payment.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Payments.Remove(System.Int32)">
	<summary>
 Removes a payment from the payment collection
 </summary>
	<param name="paymentID">The id of the payment to remove.</param>
	<remarks></remarks>
</member><member name="M:SPM.Payments.RemoveAt(System.Int32)">
	<summary>
 Removes a payment from the payment collection
 </summary>
	<param name="index">The index of the payment to remove.</param>
	<remarks></remarks>
</member><member name="M:SPM.Payments.FindByID(System.Int64)">
	<summary>
 Looks through the collection and returns the <see cref="T:SPM.Payment"/> with the given ID.
 </summary>
	<param name="paymentID">The ID used for the lookup.</param>
	<returns>
 If the ID is found the <see cref="T:SPM.Payment"/>, if not found then the value of Nothing.
 </returns>
	<remarks></remarks>
</member><member name="T:SPM.Payments">
	<summary>
 A collection of <see cref="T:SPM.Payment">Payment objects</see>.
 </summary>
	<remarks></remarks>
	<moduleiscollection/>
</member><member name="T:SPM.LoyaltyGatewayStatus.ConnectionEventHandler">
	<summary>
 the method that will handle a connection status changed event when the event provides data
 </summary>
	<param name="sender">
 The sender object.
 </param>
	<param name="connectionState">
 The connectionState object that holds scanned data or balance inquried data.
 </param>
</member><member name="E:SPM.LoyaltyGatewayStatus.ConnectionEvent">
	<summary>
 The event for the ConnectionEventHandler
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.LoyaltyGatewayStatus.Instance">
	<summary>
 Returns the instance of the LoyaltyGatewayStatus.
 </summary>
	<returns>The LoyaltyGatewayStatus.</returns>
	<remarks></remarks>
</member><member name="M:SPM.LoyaltyGatewayStatus.#ctor">
	<summary>
 Constructor Method.<br/>
 Creates a new LoyaltyGatewayStatus object and prepares a connection status thread for execution.
 </summary>
</member><member name="P:SPM.LoyaltyGatewayStatus.IsSupported">
	<summary>
 Gets whether a loyalty gateway is supported as a boolean.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.LoyaltyGatewayStatus.CurrentStatus">
	<summary>
 Gets the current connection status of the loyalty host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.LoyaltyGatewayStatus.StartConnectionStatusThread">
	<summary>
 Starts a thread for monitoring the connection to the Standalone Loyalty Gateway.
 </summary>
</member><member name="M:SPM.LoyaltyGatewayStatus.StopConnectionStatusThread">
	<summary>
 Stops the connection monitoring thread.
 </summary>
</member><member name="F:SPM.LoyaltyGatewayStatus.disposed">
	<summary>
 Indicates whether the disposal has occurred successfully.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.LoyaltyGatewayStatus.Finalize">
	<summary>
 Calls the garbage collection for this object.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.LoyaltyGatewayStatus">
	<summary>
 The gateway status tracker for loyalty gateways.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Errors.ClassId">
	<exclude/>
</member><member name="F:SPM.Errors.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Errors.EventsId">
	<exclude/>
</member><member name="M:SPM.Errors.#ctor">
	<summary>
 The default constructor
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Errors.LastError">
	<summary>
 Read-only. Gets the last <see cref="T:SPM.Error"/> object added to the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Errors.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.Error"/> object at the requested index.</summary>
</member><member name="P:SPM.Errors.Count">
	<summary>
 Gets the number of <see cref="T:SPM.Error">Errors</see> in the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Errors.AddObject(SPM.Error)">
	<summary>Adds an <see cref="T:SPM.Error"/> object to the collection.</summary>
	<returns>Returns the index of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.Error"/> object to add to the collection. 
 </param>
</member><member name="M:SPM.Errors.Clear">
	<summary>Clears the Errors collection of all error objects.</summary>
</member><member name="T:SPM.Errors">
	<summary>
 A collection of <see cref="T:SPM.Error"/> objects.
 </summary>
	<remarks></remarks>
	<moduleiscollection/>
</member><member name="T:SPM.SPMObjects.Common.POSSoftwareSupported">
	<exclude/>
	<excludetoc/>
</member><member name="T:SPM.SPMObjects.Common">
	<exclude/>
	<excludetoc/>
</member><member name="P:SPM.CustomDatas.Item(System.Int32)">
	<summary>
 The default property for the collection. Specifies the specific
 <see cref="T:SPM.CustomData"/> object to work with.
 </summary>
	<param name="index">
 The unique index into the collection for the specific
 <see cref="T:SPM.CustomData"/>.
 </param>
</member><member name="M:SPM.CustomDatas.AddObject(SPM.CustomData)">
	<summary>Adds an <see cref="T:SPM.CustomData"/> object to the collection.</summary>
	<returns>Returns the index of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.CustomData"/> object to add to the collection. 
 </param>
</member><member name="M:SPM.CustomDatas.Add(System.String,System.String)">
	<summary>
 Adds a new AddOn item to the collection and returns the new item to the user
 </summary>
	<param name="name">The name of the <see cref="T:SPM.CustomData"/> object.</param>
	<param name="value">The value of the <see cref="T:SPM.CustomData"/> object.</param>
	<returns>The <see cref="T:SPM.CustomData"/> object just added to the collection.</returns>
	<remarks>If the key already exists the error will be ignored and the return value will be empty.</remarks>
</member><member name="M:SPM.CustomDatas.Exists(SPM.CustomData)">
	<summary>
 Looks up an <see cref="T:SPM.CustomData"/> object to see if it is in the collection
 </summary>
	<param name="test">The <see cref="T:SPM.CustomData"/> object to look up.</param>
	<returns>True if the object exists, otherwise false.</returns>
	<remarks></remarks>
</member><member name="P:SPM.CustomDatas.Count">
	<summary>
 Gets the number of <see cref="T:SPM.Wallet"/> objects in the collection.
 </summary>
</member><member name="M:SPM.CustomDatas.LogMe">
	<summary>
 Logs me.	
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.CustomDatas">
	<summary>
 A collection of <see cref="T:SPM.CustomDatas"/> objects.
 </summary>
	<moduleiscollection/>
	<exclude/>
</member><member name="M:SPM.CustomData.#ctor">
	<summary>Creates a new instance of an CustomData object</summary>
</member><member name="M:SPM.CustomData.#ctor(System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.CustomData"/> class.	
 </summary>
	<param name="name">The name or key of the item</param>
	<remarks></remarks>
</member><member name="M:SPM.CustomData.#ctor(System.String,System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.CustomData"/> class.
 </summary>
	<param name="name">The name or key of the item</param>
	<param name="value">The string value for the item</param>
	<remarks></remarks>
</member><member name="F:SPM.CustomData._name">
	<exclude/>
	<excludetoc/>
</member><member name="P:SPM.CustomData.Name">
	<summary>
 The name of the object.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.CustomData.Value">
	<summary>
 The value of the object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.CustomData">
	<summary>
 CustomData are used for custom information. They are essentially a Name/Value pair, with a unique key.
 </summary>
	<exclude/>
	<remarks></remarks>
</member><member name="T:SPM.ICustomDatas">
	<exclude/>
</member><member name="F:SPM.Coupon.ClassId">
	<exclude/>
</member><member name="F:SPM.Coupon.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Coupon.EventsId">
	<exclude/>
</member><member name="M:SPM.Coupon.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.Coupon"/> class.
 </summary>
</member><member name="P:SPM.Coupon.Key">
	<summary>
 A GUID that identifies this specific coupon object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.MDMID">
	<summary>
 Gets the MDMID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.ApprovalNumber">
	<summary>
 Read-only. Approval number returned from coupon processor.
 This property can be used for standalone coupon process which is not associated with any card object.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.HostOrderID">
	<summary>
 Gets the order reference id given from the host gateway.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.VoidReferenceNumber">
	<summary>
 Void reffrence number returned from coupon processor.
 This property value can be re-used for voiding out the coupon when it needed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.Title">
	<summary>
 Gets/Sets the Title of the coupon.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.CouponCampaignType">
	<summary>
 Gets/Sets the Title of the coupon.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.Details">
	<summary>
 Gets/sets the detailed information of the coupon.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.IsSelectedByCustomer">
	<summary>
 Gets the whether or not this coupon is selected by a Customer
 When this is set to true, it means that this coupon has been selected by customer and needs to be applied.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.DigitalData">
	<summary>
 Gets/sets the digital data of the coupon.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.EndDate">
	<summary>
 Gets/sets the expiration of the coupon. This is for information only.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.CouponCode">
	<summary>
 Gets/sets the code for the coupon.
 This value may represent an coupon campain ID or the coupon identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.IsMobile">
	<summary>
		<br>Gets whether or not this coupon came from the Subway Mobile App (Integrated Offer).</br>
 When this is set to true, it means that this coupon has been selected by customer and needs to be applied.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.CouponRawData">
	<summary>
 Gets/sets the raw data which may represent barcode or QRcode data.
 This raw data may be used as a token to get the CouponCode or the offer PLU
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.AccountID">
	<summary>
 Gets/sets the account id associated with its parent card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.CouponValue">
	<summary>
 Gets/sets the discount amount for the coupon.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.CouponProcessed">
	<summary>
 Indicates whether the coupon has been processed or not
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.CouponStatus">
	<summary>
 Indicates the current coupon status
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.CustomerURI">
	<summary>
 Unique identifier for the customer.
 This property is not equivalent to the AccountID of a Card or Coupon object
 This property is only for US/Canada envrionment
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupon.PLU">
	<summary>
 Product PLU that is associated with this coupon.
 For Example, PLU of "Free Cookie"
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.Coupon">
	<summary>
 Coupon information obtained through electronic means.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.My.MyCouponCacheProperty.CouponCache">
	<summary>
 The singleton instance of the configuration information, to be used in other
 classes and modules for this assembly.
 </summary>
</member><member name="T:SPM.My.MyCouponCacheProperty">
	<exclude/>
</member><member name="F:SPM.CouponCache.myLock">
	<summary>
 An object used strictly to set SynchLock for asynchronous operations
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.CouponCache.LogMe">
	<summary>
 Should call the overloaded method of LogMe with a default title
</summary>
</member><member name="M:SPM.CouponCache.LogMe(System.String)">
	<summary>
Use the Gurock Context object to log properties of the class.
</summary>
	<param name="title"></param>
	<remarks>
 This method is used instead of serializing a class in case some of the properties and 
 methods need to be sanitized or there is a desire not to log all properties.
 </remarks>
</member><member name="F:SPM.Cards.ClassId">
	<exclude/>
</member><member name="F:SPM.Cards.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Cards.EventsId">
	<exclude/>
</member><member name="M:SPM.Cards.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.Cards"/> class.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Cards.Parent">
	<summary>
 Gets the request object owning the card collection.  This allows this collection
 to get/set properties of the request object.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Cards.CreditCardCount">
	<summary>
 Gets the number of credit cards in the collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Cards.DebitCardCount">
	<summary>
 Gets the number of credit cards in the collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Cards.ClubCardCount">
	<summary>
 Gets the number of Subway(R) cards in the collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Cards.HasAlternateID">
	<summary>
 Gets whether any of the cards in the collection are referenced by an alternate id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Cards.HasDebit">
	<summary>
 Gets whether there are any debit cards in the collection or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>It is useful to know if there are any debits in order to obtain PINs or not.</remarks>
</member><member name="P:SPM.Cards.PromoCard">
	<summary>
 Gets the promotion card in the collection, if any.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The promotion card is the card that will receive any promotion bonus points.
 This is also the card that is being tracked for multiple visits, etc.
 </remarks>
</member><member name="P:SPM.Cards.HasPromoCard">
	<summary>
 Gets whether or not the cards collection has a card that is designated as promo
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Cards.Item(System.Int32)">
	<summary>
 The default property for the collection. Specifies the specific
 <see cref="T:SPM.Card"/> object to work with.
 </summary>
	<param name="index">
 The unique index into the collection for the specific
 <see cref="T:SPM.Card"/>.
 </param>
</member><member name="M:SPM.Cards.AddObject(SPM.Card@)">
	<summary>Adds an <see cref="T:SPM.Card">Card</see> object to the collection.</summary>
	<returns>Returns the key of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.Card">Card</see> object to add to the collection.
 </param>
</member><member name="P:SPM.Cards.Count">
	<summary>
 Gets the number of <see cref="T:SPM.Card">Cards</see> in the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.RegisterWatcher(SPM.CardWatcher)">
	<summary>
 This method should be called by the Request object to register a CardWatcher to receive notifications on card addition.
 </summary>
	<param name="listener">An object implementing the CardWatcher interface.</param>
	<remarks></remarks>
</member><member name="M:SPM.Cards.FindByAccountID(System.String)">
	<summary>
 Searches the collection for a card with the AccountID.
 </summary>
	<param name="accountId">A string representation of the account ID. This should numeric only.</param>
	<returns>The <see cref="T:SPM.Card">Card</see> object with the given account ID.
 The function will return a value of 'Nothing' if not found. </returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.FindByMDMID(System.String)">
	<summary>
 Searches the collection for a card with the AccountID.
 </summary>
	<param name="mdmid">A string representation of the account ID. This should numeric only.</param>
	<returns>The <see cref="T:SPM.Card">Card</see> object with the given account ID.
 The function will return a value of 'Nothing' if not found. </returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.FindByReferenceNo(System.String)">
	<summary>
 Finds and returns the found card by reference number.
 </summary>
	<param name="ReferenceNo">The card reference number to search for.</param>
	<returns>The card that is found or null if not found.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.FindByCustomReferenceNo(System.String)">
	<summary>
 Finds and returns the found card by reference number.
 </summary>
	<param name="cusRefNum">The card reference number to search for.</param>
	<returns>The card that is found or null if not found.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.FindByHostAccountID(System.String)">
	<summary>
 Searches the collection for a card with the Host AccountID, which is normally
 sanitized.
 </summary>
	<returns>
    The <see cref="T:SPM.Card">Card</see> object with the given host account ID. The function
    will return a value of 'Nothing' if not found.
 </returns>
	<param name="accountID">A string representation of the host account ID.</param>
</member><member name="M:SPM.Cards.FindByKey(System.String)">
	<summary>
 Searches the collection for a card with the given key.
 </summary>
	<param name="key">A string representation of the key.</param>
	<returns>The <see cref="T:SPM.Card">Card</see> object with the given key.
 The function will return a value of 'Nothing' if not found.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.Remove(SPM.Card)">
	<summary>
 Removes a <see cref="T:SPM.Card">Card</see> from the collection.
 </summary>
	<param name="card">The card object to be removed.</param>
	<remarks></remarks>
</member><member name="M:SPM.Cards.FindByCardID(System.String)">
	<summary>
 Searches the collection for a card with the given Card ID. The Card ID is
 the account ID or a manually entered card and the magnetic strip information
 for a card that is swiped.
 </summary>
	<param name="cardID">The unique ID to be used to find the <see cref="T:SPM.Card">Card</see>.</param>
	<returns>The <see cref="T:SPM.Card">Card</see> object with the given key.
 The function will return a value of 'Nothing' if not found.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.ContainsCardID(System.String)">
	<summary>
 Checks to see if a card exists with the given card ID.  This is mainly used
 when adding new cards to check if the 'new' card being added already exists
 in the collection or not.
 </summary>
	<param name="cardid">The unique ID of the card to be used to find the <see cref="T:SPM.Card">Card</see>.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.SetPromoCard">
	<summary>
 Sets the <see cref="P:SPM.Cards.PromoCard">PromoCard</see>.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Cards.PartialClear">
	<summary>
 Clear only part of the collection class. Keep the cards in the class, but clear other properties.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Cards.PostClear">
	<summary>
 Clear values after getting the response. This is needed in the Adjust Order situation.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Cards.CleanUp">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:SPM.Cards.ReceiptText(SPM.SpmEnums.ReceiptTypes)">
	<summary>
 Return the formatted text to display on the receipt for all cards in the collection.
 </summary>
	<param name="receiptType">Denotes whether to print Merchant, Customer or leave blank at the
 bottom of the receipt.
 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Cards.IPADUsed">
	<summary>Read-only. Gets whether the IPAD was used to collect card information or not.</summary>
</member><member name="T:SPM.Cards">
	<summary>
 A collection of <see cref="T:SPM.Card">Card</see> objects.
 </summary>
	<remarks></remarks>
	<moduleiscollection/>
</member><member name="F:SPM.Card.ClassId">
	<exclude/>
</member><member name="F:SPM.Card.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Card.EventsId">
	<exclude/>
</member><member name="M:SPM.Card.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.Card"/> class.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Card.Finalize">
	<summary>
 Finalize the card object.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Card.AuthDateTime">
	<summary>
 Gets the Authorization date and time.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.HostOrderID">
	<summary>
 Gets the order reference id given from the host gateway.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TipAmount">
	<summary>
 Gets the tip amount.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.HostSignatureRequiredSet">
	<summary>
 Gets whether the Host Signature required is set.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.SetHostSignatureRequiredSet(System.Boolean)">
	<summary>
 Sets whether the host has specified whether a signature is required or not.
 </summary>
	<param name="value">True if the host sent back a signature required element, false otherwise.</param>
	<remarks></remarks>
</member><member name="P:SPM.Card.HostSignatureRequired">
	<summary>
 Gets whether the Host Signature is required.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.RRN">
	<summary>
 Gets the Receiver Registration Number.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.PINBlock">
	<summary>
 Gets the PinBlock.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.MACBlock">
	<summary>
 Gets the MACBlock.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.KeyIndex">
	<summary>
 Gets the Key index.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AccountType">
	<summary>
 Gets the Account type.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.ApplicationPreferredName">
	<summary>
 Gets the Application Preffered Name.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.ApplicationLabel">
	<summary>
 Gets the Application label.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AID">
	<summary>
 Gets the Application identifier
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TVR">
	<summary>
 Gets the Terminal Verification Results.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TSI">
	<summary>
 Gets the Transaction Status Indicator.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.MID">
	<summary>
 Gets the Merchant Identification Number.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TID">
	<summary>
 Gets the Transaction Identification Number.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.Fallback">
	<summary>
 Gets whether a fallback has occurred or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.LoyaltyOfflineFallBack">
	<summary>
		<br>Gets/Set LoyaltyOfflineFallBack mode</br>
		<br>If True, and the current Loyalty Server Status is Offline,
 SPM will by-pass implicit earning points(token) process </br>
	</summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.SetHostSignatureRequired(System.Boolean)">
	<summary>
 Sets if the host signature is required or not
 </summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:SPM.Card.Parent">
	<summary>
 Gets or sets the reference to the <see cref="T:SPM.Cards"/> collection that contains this card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AddedByHost">
	<summary>
 Gets or sets whether the card was added by the host or was added by the POS. It will only be added by the
 host during a VOID situation.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.Coupons">
	<summary>Read-only. Returns collection of CouponInfomation which is associated with a particular loyalty account. If there are no coupon
 the property returns null</summary>
</member><member name="P:SPM.Card.HasCoupon">
	<summary>Read-only. Gets whether the card has coupon(s) or not.</summary>
</member><member name="P:SPM.Card.Certificates">
	<summary>Read-only. Returns collection of Certificate which is associated with a particular loyalty account. If there are no coupon
 the property returns null</summary>
</member><member name="P:SPM.Card.HasCertificates">
	<summary>Read-only. Gets whether the card has Certificate(s) or not.</summary>
</member><member name="P:SPM.Card.SimulateCoupon">
	<summary>
 Gets or sets whether the next card acquisition should simulate a Coupon or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The property defaults to false and is only usable when in test mode. If used, check the Card's HasCoupon property
 to see if a coupon was obtained. Check also the Card's CouponInfo property for the coupon information.</remarks>
</member><member name="P:SPM.Card.VoidReferenceNumber">
	<summary>
 Void reference number returned from card processor. This property value can be re-used for voiding the card when it is needed.
 </summary>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.LastError">
	<summary>
 Gets the last error that occurred when processing this card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.Payments">
	<summary>
 Gets or sets the list of payments that this card represents.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CardID">
	<summary>
 Gets the cardID for this card
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.MagneticData">
	<summary>
 Gets the full magnetic data on the card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is only available if the card was Swiped.</remarks>
</member><member name="P:SPM.Card.CVMSignatureRequired">
	<summary>
 Gets whether the CVM signature is required.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.FingerPrintData">
	<summary>
 Gets the Magna Print data for a card that was swiped through the IPAD.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.SetFingerPrintData(System.String)">
	<summary>
 Set the Magne Print data for a card swiped through an IPAD.
 </summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:SPM.Card.FingerPrintStatus">
	<summary>
 Gets the Magne Print Status for a card swiped through an IPAD
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.SetFingerPrintStatus(System.String)">
	<summary>
 Sets the Magne Print Status
 </summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:SPM.Card.Amount">
	<summary>
 Gets or sets the amount this card represents.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CardTypeID">
	<summary>
 Gets or sets the amount this card represents.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AmountString">
	<summary>Read-only. Gets the amount, including currency, as a string.</summary>
</member><member name="P:SPM.Card.RequestedAmount">
	<summary>
 Gets or sets the requested amount of a card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AccountID">
	<summary>
 Gets or sets the card number.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.NeedPhoneLookUpToAddPoints">
	<summary>
 Gets whether or not the card needs phone number lookup to add points.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.MDMID">
	<summary>
 Gets or sets MDMID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.PaymentToken">
	<summary>
 Gets or sets PaymentToken
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.HasPaymentToken">
	<summary>
		<br>Get whether the card object contains the PaymentToken or not</br>
	</summary>
	<value></value>
	<returns>
		<br>True means a customer definitely wants to pay with this card</br>
		<br>False means the card may be obtained for other reason</br>
	</returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AccountIDLast4">
	<summary>Read-only. Gets the last 4 digits of the account number.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.AccountIDSanitized">
	<summary>Read-only. Gets the "sanitized" card number, where all but the last 4 digits display an asterisk (*) instead of the real number.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.AlternateID">
	<summary>Read-only. Gets the alternate ID used for this card, if exists.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.FirstName">
	<summary>Gets the Customer's FirstName used for this card, if exists.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.LastName">
	<summary>Gets the Customer's LastName used for this card, if exists.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.PhoneNumber">
	<summary>Gets the Customer's PhoneNumber used for this card, if exists.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.HasAlternateID">
	<summary>Read-only. Gets whether this card has an Alternate ID or not.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="M:SPM.Card.SetAccountIDLast4(System.String)">
	<summary>
 Sets the Account ID's Last 4 digit value.
 </summary>
	<param name="accountIDLast4">The last 4 digit to set to.</param>
	<remarks></remarks>
</member><member name="M:SPM.Card.SetAlternateID(System.String)">
	<summary>
 Sets the Alternate value
 </summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:SPM.Card.HostAccountID">
	<summary>
 Gets the Account ID returned from the card processing host.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.EMVResponse">
	<summary>
 Sets or Gets the EMV response.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TPKResponse">
	<summary>
 Gets or Sets the TPK response.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TAKResponse">
	<summary>
 Gets or Sets the TAK response.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.MACResponse">
	<summary>
 Gets or Sets the MAC response.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.MACBlockResponse">
	<summary>
 Gets or Sets the MAC block response.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.IsRegistered">
	<summary>
 Returns true if the card has been registered at MySubwaycard.com, false otherwise.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AccountStatus">
	<summary>
 Read-only. Denotes the status of the account
 </summary>
	<value></value>
	<returns></returns>
	<remarks>See <see cref="P:SPM.Card.AccountStatus"></see> for possible values.</remarks>
</member><member name="P:SPM.Card.AccountStatusDescription">
	<summary>
 Read-only. A text representation of the Account status.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CardStatus">
	<summary>Read-only. Gets the status of the card.</summary>
</member><member name="P:SPM.Card.CardStatusDescription">
	<summary>Read-only. Gets a string representation of the status of the card.</summary>
</member><member name="P:SPM.Card.AcquireMethod">
	<summary>
 ReadOnly. Gets the method used to acquire the card information.
 See <see cref="T:SPM.SpmEnums.AcquireMethods">AcquireMethods</see> for possible values.
 </summary>
	<returns></returns>
</member><member name="P:SPM.Card.AcquireMethodDescription">
	<summary>
 Read-only. Gets return a string representation of the method used to acquire the card information
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.ApprovalNumber">
	<summary>
 Read-only. Approval number returned from card processor.
 This number should be displayed on the receipt
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AuthorizationNumber">
	<summary>
 Read-only. Authorization number returned from card processor. AuthorizationNumber
 and ApprovalNumber contain the same value. AuthorizationNumber is returned for
 backward compatibility only. In the case of CreditCardVoiceAuthorize, AuthorizationNumber
 is obtained by human intervention (phone call to card processor).
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AvsResponseCode">
	<summary>
 Read-only. Address Verification Service response code
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CardPurpose">
	<summary>Read-only. Gets the purpose of the card. <see cref="T:SPM.SpmEnums.CardPurposes">CardPurposes</see> for possible values.</summary>
	<remarks></remarks>
	<value></value>
	<returns></returns>
</member><member name="P:SPM.Card.CardPurposeDescription">
	<summary>
 Read-only. The string description of the card purpose.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.DeviceType">
	<summary>
 The <see cref="T:SPM.Utilities.DeviceTypes"/> that is used to read this card information.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CardBrand">
	<summary>
 Gets or sets the brand of a card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CardBrandDescription">
	<summary>
 Read-only. The string description of the card brand.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CVV2">
	<summary>
 Gets or sets the CVV number on a card. Useful for credit card transactions entered manually.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CvvResponseCode">
	<summary>
 Read-only. Gets the response returned when CVV2 is used
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.DirectDeviceEntry">
	<summary>
 Read-only. Gets the value set on whether the card was entered through
 direct device entry or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.ExpirationDate">
	<summary>
 Gets or sets the expiration date of the card. Needs to be in the format mm/yy.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.IsError">
	<summary>Read-only. Gets whether an error occurred during the acquisition of card information or not.</summary>
</member><member name="P:SPM.Card.IsNew">
	<summary>
 Gets or sets whether a Cash Card or Rewards card is thought to be new.
 </summary>
	<value></value>
	<returns></returns>
	<remarks> If this flag is set then the system will activate the card
 when placing the order. This setting is not necessary in the current
 environment as the cards are set to activate on first use at the host.</remarks>
</member><member name="P:SPM.Card.IsPromo">
	<summary>
 Gets or sets whether this card should receive any promotional points.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>There can only be one card that is the 'Promo' card.
 If more than one card is designated as the promo card, only the last
 one designated will be set to get the promotional points.
 </remarks>
</member><member name="P:SPM.Card.IsSignatureRequired">
	<summary>
 Read-only. Denotes whether the merchant should obtain a signature from the card holder
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.Key">
	<summary>
 The unique key for this card in a collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.NameOnCard">
	<summary>
 Gets or sets the name presented on the card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Set this value if the card information is obtained manually.</remarks>
</member><member name="P:SPM.Card.PaymentType">
	<summary>
 Read-only. Gets the payment type returned from the host processor.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The PaymentType typically refers to the card issuer (e.g. VISA, MC, AMEX)</remarks>
</member><member name="P:SPM.Card.ReferenceNumber">
	<summary>
 Read-only. Merchant assigned reference number.
 Must be unique (used one time on a given day) or
 transactions may be declined as duplicates.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.CustomReferenceNumber">
	<summary>
 For the internal use in case the card needs the special refrence number
 to process a certain request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.RequestID">
	<summary>
 Gets the host side's request Id for their internal transaction. This is
 useful when troubleshooting issues with the host for them to look up
 the transaction in their logs.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.ResponseCode">
	<summary>
 Read-only. Numerical value returned from all method calls. Indicates success or failure of the method.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.ResultCode">
	<summary>
 Read-only. Result code from the card processor
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.ResultMessage">
	<summary>
 Read-only. Result message returned from card processor.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TraceNumber">
	<summary>
 Read-only. A trace number returned on debit card transactions.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TrackI">
	<summary>
 Gets the information provided on the magnetic track I.
 This is populated by using the ParseMagneticData function.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TrackII">
	<summary>
 Read-only. Gets the information provided on the magnetic track II.
 This is populated by using the ParseMagneticData function
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TransactionDate">
	<summary>
 Read-only. The date that a credit card or debit card transaction occurred at the Acquirer.
 The format of the string is YYMMDD
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TransactionTime">
	<summary>
 Read-only. The time that a credit card or debit card transaction occurred at the Acquirer.
 The format of the string is HHMMSS
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TransactionDateTime">
	<summary>
 Read-only. Gets the date and time concatenated together
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.TransactionID">
	<summary>
 Read-only. Gets the unique card processor generated identifier.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.SetTransactionID(System.String)">
	<summary>
 Sets the TransactionID value.
 </summary>
	<param name="value">The value to set.</param>
	<remarks></remarks>
</member><member name="P:SPM.Card.Timestamp">
	<summary>
 Read-only. Gets the UTC time at the host for a credit/debit card transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.VoiceAuthorizationNumber">
	<summary>
 Gets or sets the the voice authorization
 number provided by the credit card processor.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.Wallets">
	<summary>
 Read-only. A collection of <see cref="T:SPM.Wallet">Wallet</see> objects for the card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.IsDebit">
	<summary>
 Gets or Sets whether this card is a debit card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.WasPinUsed">
	<summary>
 Denotes that a PIN was entered for this card.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.AcceptNSF">
	<summary>
 Gets or sets whether the card accepts NSF or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.KeySerializationNumber">
	<summary>
 Gets or sets the Key serialization number returned from the pin pad when getting the PIN.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Card.MSRKSN">
	<summary>
 Gets or sets the KSN for the Magnetic Swiped Reader used.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.LogMe">
	<summary>
 Logs me.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.Card.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">Title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="M:SPM.Card.GetCardBrand(System.String)">
	<summary>Gets the brand of card, using the first six characters of the card number to determine the card brand.</summary>
	<param name="cardNumber">The card number to be used to determine the card brand.
 The number can include spaces or dashes ("-")</param>
	<remarks></remarks>
	<returns>
		<see cref="T:SPM.SpmEnums.CardBrands">CardBrands</see> for possible values</returns>
</member><member name="M:SPM.Card.GetCardBrandDescription(SPM.SpmEnums.CardBrands)">
	<summary>
 Returns the string representation for the card brand given.
 </summary>
	<param name="brand">
		<see cref="T:SPM.SpmEnums.CardBrands">CardBrands</see> for possible values</param>
	<remarks></remarks>
	<returns>A human readable description for the card brand provided.</returns>
</member><member name="M:SPM.Card.GetCardBrandDescription(System.String)">
	<summary>
 Returns the string representation of the card type for the card number given.
 </summary>
	<param name="cardNumber">The card number to be used to determine the card brand.
 The number can include spaces or dashes ("-")</param>
	<returns>A human readable description for the card brand for the card number provided.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.GetSubwayCardData(SPM.SpmEnums.TransactionTypes)">
	<summary>Obtain card information for Subway cards that are non-payments (e.g. Balance Inquiry, Add Points)</summary>
	<param name="transactionType">Designates the type of transaction, for more information <see cref="T:SPM.SpmEnums.TransactionTypes"/>.</param>
	<remarks></remarks>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">If the result is %DialogResult.Abort% check the %LastError%
 property for what went wrong.
 </exception>
</member><member name="M:SPM.Card.GetCardData(SPM.SpmEnums.CardPurposes,System.Double,System.Int32)">
	<summary>
 Obtain card information for payments using Direct Device prompting.
 </summary>
	<param name="purpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<param name="cardAmount">The amount to be used by the card.</param>
	<param name="currencyType">The type of currency used. To redeem Points for a Rewards Card be sure to
 set the currency to <see cref="T:SPM.Currency"/>.Points.ID </param>
	<remarks></remarks>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">If the result is %DialogResult.Abort% check the %LastError%
 property for what went wrong.
 </exception>
</member><member name="M:SPM.Card.CancelGetCardData(SPM.SpmEnums.CardPurposes)">
	<summary>
 Sends the cancel command to the supported pinpad devices
 </summary>
	<param name="purpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<returns>True if the command has succeeded, otherwise false.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.GetCardData(SPM.SpmEnums.CardPurposes,System.Double,SPM.Currency)">
	<summary>
 Obtain card information for payments using Direct Device prompting.
 </summary>
	<param name="purpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<param name="cardAmount">The amount to be used by the card.</param>
	<param name="currency">The type of currency used. To redeem Points for a Rewards Card be sure to
 set the currency to <see cref="T:SPM.Currency"/>.Points</param>
	<remarks></remarks>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">If the result is %DialogResult.Abort% check the %LastError%
 property for what went wrong.
 </exception>
</member><member name="M:SPM.Card.GetCardData(SPM.SpmEnums.CardPurposes,System.Double,SPM.Currency,System.Boolean)">
	<summary>
 Obtain card information for payments using Direct Device prompting.
 </summary>
	<param name="purpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<param name="cardAmount">The amount to be used by the card.</param>
	<param name="currency">The type of currency used. To redeem Points for a Rewards Card be sure to
 set the currency to <see cref="T:SPM.Currency"/>.Points</param>
	<param name="isVoid">If the card will be used for a void.</param>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">If the result is %DialogResult.Abort% check the %LastError%
 property for what went wrong.
 </exception>
</member><member name="M:SPM.Card.GetCardData(SPM.SpmEnums.CardPurposes,System.Double,System.Int32,System.Boolean)">
	<summary>
 Obtain card information for payments using Direct Device prompting.
 </summary>
	<param name="purpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<param name="cardAmount">The amount to be used by the card.</param>
	<param name="currencyType">The type of currency used. To redeem Points for a Rewards Card be sure to
 set the currency to <see cref="T:SPM.Currency"/>.Points.ID </param>
	<param name="isVoid">If the card will be used for a void.</param>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<exception caption="" cref="T:SPM.SpmException">If the result is %DialogResult.Abort% check the %LastError%
 property for what went wrong.
 </exception>
</member><member name="M:SPM.Card.GetCardDataWithTip(SPM.SpmEnums.CardPurposes,System.Double,SPM.Currency,System.Boolean,System.Boolean)">
	<summary>
 Obtain card information for payments using Direct Device prompting.
 </summary>
	<param name="purpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<param name="cardAmount">The amount to be used by the card.</param>
	<param name="currency">The type of currency used. To redeem Points for a Rewards Card be sure to
 set the currency to <see cref="T:SPM.Currency"/>.Points.ID </param>
	<param name="isVoid">If the card will be used for a void.</param>
	<param name="tipPrompt">Whether a prompt for tip or not.</param>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.GetCardDataSimulated(SPM.SpmEnums.CardPurposes,System.Double,SPM.Currency,SPM.MagTekSimulatedCardData)">
	<summary>
 Simulate card data acquisition to facilitate automated testing.
 </summary>
	<param name="cardPurpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<param name="amount">The amount to be used by the card.</param>
	<param name="currency">The type of currency used. To redeem Points for a Rewards Card be sure to
 set the currency to <see cref="T:SPM.Currency"/>.Points.ID </param>
	<param name="simulatedData">The simulated data to use.</param>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.GetMobileCardDataSimulated(SPM.SpmEnums.CardPurposes,System.Double,SPM.Currency,SPM.MobileSimulatedCardData)">
	<summary>
 Gets a simulated mobile card data. (Not implemented yet)
 </summary>
	<param name="cardPurpose">Designates how the card will be used.
 For additional reference see <see cref="T:SPM.SpmEnums.CardPurposes"/>.</param>
	<param name="amount">The amount to be used by the card.</param>
	<param name="currency">The type of currency used. To redeem Points for a Rewards Card be sure to
 set the currency to <see cref="T:SPM.Currency"/>.Points.ID </param>
	<param name="simulatedData">The simulated data to use.</param>
	<returns>
		<list type="bullet">
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.OK"/> - The data was received successfully.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Cancel"/> - The user canceled the dialog box to obtain the card information.</item>
			<item>
				<see cref="F:System.Windows.Forms.DialogResult.Abort"/> - One or more of the parameters are not appropriate or an error occurred while attempting to retrieve the card information. Check
    the <see cref="P:SPM.Card.LastError"/> property for what went wrong.</item>
		</list>
	</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.IsValidCardNumber(System.String)">
	<summary>
 Performs a MOD 10 algorithm on the card number to determine if the card
 number is a valid card number or not. This does not check to be sure that
 the right number of characters are present for the card type, just that the
 MOD 10 algorithm is met.
 </summary>
	<param name="cardNumber">The card number to be used to determine the card brand. The number can include spaces or dashes ("-")</param>
	<remarks></remarks>
	<returns>True if the card number is valid, false otherwise.</returns>
</member><member name="M:SPM.Card.ParseMagneticData(SPMPinpad.Data.MagneticData)">
	<summary>
 Parses the magnetic data provided.
 </summary>
	<param name="magData">The full magnetic data read from the back of the card.  Includes
 Track I and Track II if both are present.</param>
	<returns>True if the data is successfully parsed, otherwise false.</returns>
	<remarks>Credit and Debit cards are parsed into separate Track I and Track II data.
 Cash and Rewards cards are not parsed, but the data is accepted. The caller should set the
 appropriate <see cref="P:SPM.Card.AcquireMethod">AcquireMethod</see> if returned true.</remarks>
</member><member name="M:SPM.Card.ReceiptTextSubway(System.Boolean,System.Boolean,System.Int32)">
	<summary>
 Returns receipt text for Subway(R) cards.
 </summary>
	<param name="activeAccountsOnly">Optional, default 'TRUE'. If flag is true
 then information from active Subway(R) Cards used in the transaction will be returned.
 If false, then information from all Subway(R) cards used in the transaction will be
 returned.</param>
	<param name="showStatus">Optional, default 'FALSE'. If flag is true then the
 status of the card will be before the card balances. If false, then the status will
 not be returned.</param>
	<param name="receiptWidth">Optional, default value = 40. The code will word wrap text
 to the width provided.  Many receipt printers have a max width limit of 40 characters.</param>
	<returns>A string representation of what should be printed on a receipt. The text is word wrapped to fit 40 characters wide, by default.</returns>
</member><member name="M:SPM.Card.TranslateAcquireMethod">
	<summary>
 Parses the acquire method and returns the translated method as a string.
 </summary>
	<returns>The string value of the translated acquire method.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.ReceiptTextCC(SPM.SpmEnums.ReceiptTypes)">
	<summary>Returns receipt text for credit cards.</summary>
	<param name="receiptType">Optional. Default value is <see cref="F:SPM.SpmEnums.ReceiptTypes.Default"/>. Used to return a Merchant copy of the receipt or a Customer copy of the receipt.</param>
	<remarks>This routine will also provide the signature block if required.
 Also, this routine provides the information in English only.</remarks>
	<returns>A string representation of what should be printed on a receipt. The text is word wrapped to fit 40 characters wide.</returns>
</member><member name="M:SPM.Card.IsSecureCardCollection(SPM.SpmEnums.TransactionTypes)">
	<summary>
 Return if the device set to use is for an unsecure device
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.ParseCCAuth(SPM.Card)">
	<summary>
 Parses the card authorization response and sets the cards values based
 on the response that is parsed.
 </summary>
	<param name="card">The card to be parsed.</param>
	<returns>Returns true if successful, otherwise false.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.UpdateAmountAdded(SPM.Card)">
	<summary>
 Updates the amount added for this card from another card object. This routine is intended
 to be used after parsing a returned XML for an item and the associate card is already in our
 collection. In this situation the incoming card will have only one wallet. Use that wallet
 to update the value of this card's wallet with the same currency. Add wallet if necessary.
 </summary>
	<param name="card"></param>
	<remarks></remarks>
</member><member name="M:SPM.Card.UpdateAmountBonus(SPM.Card)">
	<summary>
 Updates the amount added for this card from another card object. This routine is intended
 to be used after parsing a returned XML for an item and the associate card is already in our
 collection. In this situation the incoming card will have only one wallet. Use that wallet
 to update the value of this card's wallet with the same currency. Add wallet if necessary.
 </summary>
	<param name="card"></param>
	<remarks></remarks>
</member><member name="M:SPM.Card.UpdateAmountRedeemed(SPM.Card)">
	<summary>
 Updates the amount added for this card from another card object. This routine is intended
 to be used after parsing a returned XML for an item and the associate card is already in our
 collection. In this situation the incoming card will have only one wallet. Use that wallet
 to update the value of this card's wallet with the same currency. Add wallet if necessary.
 </summary>
	<param name="card"></param>
	<remarks></remarks>
</member><member name="M:SPM.Card.op_Equality(SPM.Card,SPM.Card)">
	<summary>
 Override of the equals (=) operator in order to compare card objects.
 </summary>
	<param name="lhs">First card to compare.</param>
	<param name="rhs">Second card to compare.</param>
	<returns>True if the CardIDs match.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.op_Inequality(SPM.Card,SPM.Card)">
	<summary>
 Override of the unequal operator (&lt;&gt;) in order to compare card objects.
 </summary>
	<param name="lhs">First card to compare.</param>
	<param name="rhs">Second card to compare.</param>
	<returns>True if the CardIDs do not match.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Card.ToString">
	<summary>
 Provides a string representation of the card in the format of [{Card Purpose}] - {Last 4}.
 </summary>
	<returns>Returns a string representing the Card.</returns>
	<remarks></remarks>
</member><member name="T:SPM.Card">
	<summary>
 The card object represents all cards that can be used. They are Subway(R) Cash Cards;
 Subway(R) Rewards Cards; Credit cards; and Debit cards.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AddValues.ClassId">
	<exclude/>
</member><member name="F:SPM.AddValues.InterfaceId">
	<exclude/>
</member><member name="F:SPM.AddValues.EventsId">
	<exclude/>
</member><member name="M:SPM.AddValues.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.AddValues"/> class.	
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.AddValues.Add(System.Int32)">
	<summary>
 Adds a new <see cref="T:SPM.AddValue"/> to the collection with the given ID.
 </summary>
	<param name="AddValueID">The ID of the item.  This will be used as the Key.
 </param>
	<returns>
 The newly created <see cref="T:SPM.AddValue"/>. If an item with this ID already exists
 then the original item is returned.
 </returns>
	<remarks></remarks>
</member><member name="M:SPM.AddValues.AddAddValue(SPM.AddValue)">
	<summary>
 Adds a new <see cref="T:SPM.AddValue"/> to the collection.
 </summary>
	<param name="av">The <see cref="T:SPM.AddValue"/> object to add.</param>
	<remarks></remarks>
	<exception cref="T:System.ApplicationException">If an <see cref="T:SPM.AddValue"/> with the ID already exists an exception will be thrown.</exception>
</member><member name="M:SPM.AddValues.NewAddValue">
	<summary>
 Creates a new <see cref="T:SPM.AddValue"/> object. It does not add the object to the collection.
 </summary>
	<returns>A blank <see cref="T:SPM.AddValue"/> object.</returns>
	<remarks></remarks>
</member><member name="M:SPM.AddValues.Remove(System.Int32)">
	<summary>
 Removes a <see cref="T:SPM.AddValue"/> from the <see cref="T:SPM.AddValues"/> collection
 </summary>
	<param name="AddValueID">Integer ID of AddValue to remove.</param>
	<remarks></remarks>
</member><member name="M:SPM.AddValues.FindByID(System.Int32)">
	<summary>
 Looks through the collection and returns the <see cref="T:SPM.AddValue"/> with the given ID.
 </summary>
	<param name="AddValueID">The ID used for the lookup.</param>
	<returns>
 If the ID is found the <see cref="T:SPM.AddValue"/>, if not found then the value of Nothing.
 </returns>
	<remarks></remarks>
</member><member name="P:SPM.AddValues.MaxAddValueID">
	<summary>Gets the largest AddValueID in the collection.</summary>
</member><member name="P:SPM.AddValues.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.AddValue"/> object at the requested index.</summary>
</member><member name="M:SPM.AddValues.AddObject(SPM.AddValue)">
	<summary>Adds an <see cref="T:SPM.AddValue"/> object to the collection.</summary>
	<returns>Returns the index of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.AddValue"/> object to add to the collection. 
 </param>
</member><member name="P:SPM.AddValues.Count">
	<summary>
 Gets the number of <see cref="T:SPM.AddValue">AddValues</see> in the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.AddValues">
	<summary>
 A collection of <see cref="T:SPM.AddValue">AddValue</see> objects.
 </summary>
	<remarks></remarks>
	<moduleiscollection/>
</member><member name="T:SPM.AnytimeScanEventNotifier.AnytimeScanEventHandler">
	<summary>
 The Event for this handler.
 </summary>
</member><member name="T:SPM.AnytimeScanEventNotifier.AnytimeScanDetailedEventHandler">
	<summary>
 The method that will handle an Anytime Scan Event when the event provides data
 </summary>
	<param name="sender">The sender object.</param>
	<param name="scanEventArgs">
 The event args that holds scanned scanned data.
 </param>
</member><member name="E:SPM.AnytimeScanEventNotifier.ScanEvent">
	<summary>
 The Event for this handler.
 </summary>
	<remarks></remarks>
</member><member name="E:SPM.AnytimeScanEventNotifier.ScanEventWithDetails">
	<summary>
 The Event with the extra event datar.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.AnytimeScanEventNotifier.#ctor">
	<summary>
 Constructor Method.
 Creates a new AnytimeScanEvent object.
 </summary>
</member><member name="P:SPM.AnytimeScanEventNotifier.IsSupported">
	<summary>
 Return whether or not the AnytimescanEvent is supported or not.
 </summary>
</member><member name="P:SPM.AnytimeScanEventNotifier.IsEnabled">
	<summary>
 Enable or Disable AnytimeScan.
 </summary>
</member><member name="P:SPM.AnytimeScanEventNotifier.DirectBalanceInquiryEnabled">
	<summary>
 Enable or Disable DirectBalanceInquiry.
 If disabled, a card with only scanned data as an accountID will be returned when card scanned.
 If enabled. a card with scanned data as an accountID as well as card balance info will be returned when card scanned.
 </summary>
</member><member name="P:SPM.AnytimeScanEventNotifier.DirectCouponInquiryEnabled">
	<summary>
 Enable or Disable DirectCouponInquiry
 If Disabled, only the CouponRawData property of the Coupon object will be populated.
 If Enabled, SPM will submit an inquiry with the Offers Host and the other Coupon properties will be populated as well.
 </summary>
</member><member name="M:SPM.AnytimeScanEventNotifier.Instance">
	<summary>
 Singleton.
 This will create a new object only at the first time of the call.
 </summary>
	<returns>The instance object.</returns>
	<remarks></remarks>
</member><member name="F:SPM.AnytimeScanEventNotifier.disposed">
	<summary>
 Signifies whether the disposal has occurred successfully.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.AnytimeScanEventNotifier.Finalize">
	<summary>
 Calls the garbage collection for this object.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.AnytimeScanEventNotifier">
	<summary>
 Handles all scanner related events.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AddValue.ClassId">
	<exclude/>
</member><member name="F:SPM.AddValue.InterfaceId">
	<exclude/>
</member><member name="F:SPM.AddValue.EventsId">
	<exclude/>
</member><member name="P:SPM.AddValue.Amount">
	<summary>
 The amount of money add value represents. 
 This is the per each price not the extended price.  
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AddValue.Card">
	<summary>
 This is the <see cref="P:SPM.AddValue.Card"/> object for the line item. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AddValue.CurrencyType">
	<summary>
 Gets or sets the type of currency the line item uses.  
 </summary>
	<value></value>
	<returns></returns>
	<remarks>See <see cref="T:SPM.Currency"/> Overview for possible values. </remarks>
</member><member name="P:SPM.AddValue.Currency">
	<summary>
 Gets or sets the currency.	
 </summary>
	<value>The currency.</value>
	<remarks></remarks>
</member><member name="P:SPM.AddValue.Description">
	<summary>
 Gets or sets the description of the line item.  This can be what ever the POS desires.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AddValue.AddValueID">
	<summary>
 Gets or sets the identification or key to the particular line item.  
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This value must be unique amongst all <see cref="T:SPM.AddValue">AddValues</see>
 and <see cref="T:SPM.Payment">Payments</see> in the order.
 </remarks>
</member><member name="P:SPM.AddValue.PLU">
	<summary>
 Gets or sets the PLU of the line item. This is sometimes referred to as the SKU.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>PLU - Price Lookup Unit<br/>SKU - Stock Keeping Unit</remarks>
</member><member name="P:SPM.AddValue.Quantity">
	<summary>
 Gets or sets the quantity of the PLU being purchased.  
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.AddValue.SetCard(SPM.Card)">
	<summary>
 A method to set the <see cref="P:SPM.AddValue.Card"/> property. Created for COM clients
 that can't set the property directly.
 </summary>
	<param name="card">The <see cref="P:SPM.AddValue.Card"/> object related to this line item.</param>
	<remarks></remarks>
</member><member name="M:SPM.AddValue.GetCardData">
	<summary>
 Uses the SPM to acquire card data for the card associated with this Add Value.
 </summary>
	<returns>True if the card data was retrieved successfully, false if the card data was not obtained.
 for any reason (e.g. an exception occurred or the user cancelled).</returns>
	<remarks></remarks>
</member><member name="M:SPM.AddValue.GetCardData(System.Boolean)">
	<summary>
 Uses the SPM to acquire card data for the card associated with this Add Value.
 </summary>
	<param name="isVoid">Lets the interface know that this is for a void.</param>
	<returns>True if the card data was retrieved successfully, false if the card data was not obtained.
 for any reason (e.g. an exception occurred or the user cancelled).</returns>
	<remarks></remarks>
</member><member name="M:SPM.AddValue.LogMe">
	<summary>
 Logs me.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.AddValue.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">Title of log entry.</param>
	<remarks></remarks>
</member><member name="T:SPM.AddValue">
	<summary>
 A class used to specifically add value to Cash Cards.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AddOns.ClassId">
	<exclude/>
</member><member name="F:SPM.AddOns.InterfaceId">
	<exclude/>
</member><member name="F:SPM.AddOns.EventsId">
	<exclude/>
</member><member name="M:SPM.AddOns.#ctor">
	<summary>
  A create-able COM class must have a Public Sub New()
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created
 via CreateObject.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.AddOns.Item(System.Int32)">
	<summary>
 The default property for the collection. Specifies the specific
 <see cref="T:SPM.AddOn"/> object to work with.
 </summary>
	<param name="index">
 The unique index into the collection for the specific
 <see cref="T:SPM.AddOn"/>.
 </param>
</member><member name="M:SPM.AddOns.AddObject(SPM.AddOn)">
	<summary>Adds an <see cref="T:SPM.AddOn"/> object to the collection.</summary>
	<returns>Returns the index of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.AddOn"/> object to add to the collection. 
 </param>
</member><member name="M:SPM.AddOns.Add(System.String,System.String,System.String)">
	<summary>
 Adds a new AddOn item to the collection and returns the new item to the user
 </summary>
	<param name="key">The unique key to lookup the <see cref="T:SPM.AddOn"/> object later. 
 This will typically be the same as the name.</param>
	<param name="name">The name of the <see cref="T:SPM.AddOn"/> object.</param>
	<param name="value">The value of the <see cref="T:SPM.AddOn"/> object.</param>
	<returns>The <see cref="T:SPM.AddOn"/> object just added to the collection.</returns>
	<remarks>If the key already exists the error will be ignored and the return value will be empty.</remarks>
</member><member name="M:SPM.AddOns.Exists(SPM.AddOn)">
	<summary>
 Looks up an <see cref="T:SPM.AddOn"/> object to see if it is in the collection
 </summary>
	<param name="test">The <see cref="T:SPM.AddOn"/> object to look up.</param>
	<returns>True if the object exists, otherwise false.</returns>
	<remarks></remarks>
</member><member name="P:SPM.AddOns.Count">
	<summary>
 Gets the number of <see cref="T:SPM.AddOn"/> objects in the collection.
 </summary>
</member><member name="M:SPM.AddOns.LogMe">
	<summary>
 Logs me.	
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.AddOns.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">Title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="T:SPM.AddOns">
	<summary>
 A collection of <see cref="T:SPM.AddOn"/> objects.
 </summary>
	<moduleiscollection/>
</member><member name="F:SPM.AddOn.ClassId">
	<exclude/>
</member><member name="F:SPM.AddOn.InterfaceId">
	<exclude/>
</member><member name="F:SPM.AddOn.EventsId">
	<exclude/>
</member><member name="M:SPM.AddOn.#ctor">
	<summary>
  A create-able COM class must have a Public Sub New()
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created
 via CreateObject.
 </summary>
</member><member name="M:SPM.AddOn.#ctor(System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.AddOn"/> class.	
 </summary>
	<param name="key">The key.</param>
	<remarks></remarks>
</member><member name="F:SPM.AddOn.m_key">
	<exclude/>
</member><member name="P:SPM.AddOn.Key">
	<summary>
 Read-only. Gets the key to the object.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>The key is specified when creating a new object and ust be unique.</remarks>
</member><member name="F:SPM.AddOn.m_name">
	<exclude/>
	<excludetoc/>
</member><member name="P:SPM.AddOn.Name">
	<summary>
 The name of the object.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AddOn.Value">
	<summary>
 The value of the object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.AddOn.LogMe">
	<summary>
 Logs me.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.AddOn.LogMe(System.String)">
	<summary>
 Logs me.
 </summary>
	<param name="title">Title to use for the log entry.</param>
	<remarks></remarks>
</member><member name="T:SPM.AddOn">
	<summary>
 AddOns are used for custom information. They are essentially a Name/Value pair, with a unique key.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.OrderTaxes.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderTaxes.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderTaxes.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderTaxes.#ctor(System.Xml.Linq.XElement)">
	<param name="xml">XML to create the OrderTaxes from.</param>
</member><member name="P:SPM.OrderTaxes.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.OrderTax"/> object at the requested index.</summary>
</member><member name="P:SPM.OrderTaxes.Count">
	<summary>The number of <see cref="T:SPM.OrderTax"/> objects in the collection.</summary>
</member><member name="T:SPM.OrderTaxes">
	<summary>
 A collection of <see cref="T:SPM.OrderTax"/> objects.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.OrderTax.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderTax.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderTax.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderTax.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderTax.Name">
	<summary>
 The name of the tax as entered in the Catering/Express Online Administration Portal.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.OrderTax.Amount">
	<summary>
 The total amount tax for this type of tax.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.OrderTax.TaxableAmount">
	<summary>
 The total taxable amount for this type of tax.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.OrderTax.ToString">
	<summary>
 Returns the order tax details as a string.
 </summary>
	<returns>The string of the order tax details.</returns>
	<remarks></remarks>
</member><member name="T:SPM.OrderTax">
	<summary>
 A class that represents one of the possible taxes on an order.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.OrderPayments.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderPayments.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderPayments.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderPayments.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderPayments.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.OrderItem"/> object at the requested index.</summary>
	<param name="index">The index of the item in the collection, zero-based.</param>
</member><member name="P:SPM.OrderPayments.Count">
	<summary>The number of <see cref="T:SPM.OrderItem"/> objects in the collection.</summary>
</member><member name="T:SPM.OrderPayments">
	<summary>A collection of <see cref="T:SPM.OrderPayment"/> objects.</summary>
	<moduleiscollection/>
</member><member name="F:SPM.OrderPayment.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderPayment.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderPayment.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderPayment.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderPayment.TenderType">
	<summary>The type of tender used for this payment.</summary>
</member><member name="P:SPM.OrderPayment.Amount">
	<summary>The amount of the payment.</summary>
</member><member name="T:SPM.OrderPayment">
	<summary>A class that represents items in an order.</summary>
</member><member name="F:SPM.OrderItemOptions.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderItemOptions.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderItemOptions.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderItemOptions.#ctor(System.Xml.Linq.XElement)">
	<param name="xml">XML to create the OrderItemOptions from.</param>
</member><member name="P:SPM.OrderItemOptions.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.OrderItemOption"/> object at the requested index.</summary>
</member><member name="P:SPM.OrderItemOptions.Count">
	<summary>The number of <see cref="T:SPM.OrderItemOption"/> objects in the collection.</summary>
</member><member name="T:SPM.OrderItemOptions">
	<summary>
 A collection of <see cref="T:SPM.OrderItemOption"/> objects.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.OrderItemOption.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderItemOption.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderItemOption.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderItemOption.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderItemOption.Name">
	<summary>
 The name of the option.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.OrderItemOption">
	<summary>
 A class that represents the various options associated with an <exception cref="T:SPM.OrderItem"> object.</exception>
	</summary>
	<remarks></remarks>
</member><member name="F:SPM.OrderItems.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderItems.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderItems.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderItems.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderItems.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.OrderItem"/> object at the requested index.</summary>
	<param name="index">The index of the item in the collection, zero-based.</param>
</member><member name="P:SPM.OrderItems.Count">
	<summary>The number of <see cref="T:SPM.OrderItem"/> objects in the collection.</summary>
</member><member name="T:SPM.OrderItems">
	<summary>A collection of <see cref="T:SPM.OrderItem"/> objects.</summary>
	<moduleiscollection/>
</member><member name="F:SPM.OrderItem.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderItem.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderItem.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderItem.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderItem.PLU">
	<summary>The PLU assigned by the remote ordering system.</summary>
</member><member name="P:SPM.OrderItem.LegacyPLU">
	<summary>The matching PLU for POS Software (if found); otherwise “Unknown”.</summary>
</member><member name="P:SPM.OrderItem.ProductName">
	<summary>The name of the item.</summary>
</member><member name="P:SPM.OrderItem.Quantity">
	<summary>The number of this PLU ordered.</summary>
</member><member name="P:SPM.OrderItem.Price">
	<summary>The unit price for this line item type, not including taxes.</summary>
</member><member name="P:SPM.OrderItem.OrderItemOptions">
	<summary>A collection of <see cref="T:SPM.OrderItemOption"/> objects.</summary>
</member><member name="M:SPM.OrderItem.ToString">
	<summary>
 Returns the order item details as a String.
 </summary>
	<returns>The string data of the order item.</returns>
	<remarks></remarks>
</member><member name="T:SPM.OrderItem">
	<summary>A class that represents items in an order.</summary>
</member><member name="F:SPM.OrderDataCollection.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderDataCollection.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderDataCollection.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderDataCollection.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderDataCollection.Item(System.Int32)">
	<summary>Gets the <see cref="T:SPM.OrderItem"/> object at the requested index, zero-based.</summary>
	<param name="index">The zero-based index of the item.</param>
</member><member name="M:SPM.OrderDataCollection.GetOrderData(System.String)">
	<summary>
 Get the order data for a particular order.
 </summary>
	<param name="cartID">The Order ID of the order to retrieve.</param>
	<returns>An OrderData containing the order information.</returns>
	<remarks></remarks>
</member><member name="P:SPM.OrderDataCollection.Count">
	<summary>Gets the number of <see cref="T:SPM.OrderData"/> items in the collection.</summary>
</member><member name="T:SPM.OrderDataCollection">
	<moduleiscollection/>
	<summary>A collection of <see cref="T:SPM.OrderData"/> objects that is usable by COM applications.</summary>
</member><member name="F:SPM.OrderData.ClassId">
	<exclude/>
</member><member name="F:SPM.OrderData.InterfaceId">
	<exclude/>
</member><member name="F:SPM.OrderData.EventsId">
	<exclude/>
</member><member name="M:SPM.OrderData.#ctor">
	<summary>A constructor of the class, needed for COM-ability.</summary>
</member><member name="P:SPM.OrderData.CartID">
	<summary>The unique ID that represents this Order, assigned by the remote ordering system.</summary>
</member><member name="P:SPM.OrderData.OrderNumber">
	<summary>The short form of the CartID, presented on the Customer’s Invoice.</summary>
</member><member name="P:SPM.OrderData.OrderClosed">
	<summary>
 Whether or not the order was closed (paid for).
 </summary>
</member><member name="P:SPM.OrderData.LocationAddress">
	<summary>The first line of the address for the Store/Pick Up Location.</summary>
</member><member name="P:SPM.OrderData.LocationAddress2">
	<summary>The second line of the address for the Store/Pick Up Location.</summary>
</member><member name="P:SPM.OrderData.City">
	<summary>The city part of the address for the Store/Pick Up Location.</summary>
</member><member name="P:SPM.OrderData.State">
	<summary>The state part of the address for the Store/Pick Up Location.</summary>
</member><member name="P:SPM.OrderData.ZipCode">
	<summary>The postal code part of the address for the Store/Pick Up Location.</summary>
</member><member name="P:SPM.OrderData.FirstName">
	<summary>The first name of the customer.</summary>
</member><member name="P:SPM.OrderData.LastName">
	<summary>The last name of the customer.</summary>
</member><member name="P:SPM.OrderData.Company">
	<summary>The Customer’s Company name (if provided).</summary>
</member><member name="P:SPM.OrderData.Phone">
	<summary>The Customer’s phone number.</summary>
</member><member name="P:SPM.OrderData.HostOrderID">
	<summary>The Order ID as returned by the Payment Processor.</summary>
</member><member name="P:SPM.OrderData.HostFooter">
	<summary>The information the POS software should print on the receipt.</summary>
</member><member name="P:SPM.OrderData.OrderOrigin">
	<summary>Used to determine the origin of the order. </summary>
	<remarks>
 Current values are:
 <list type="bullet">
			<item>“web” denotes www.subwaycatering.com</item>
			<item>“mobile” denotes a mobile client</item>
			<item>“call center” denotes the call center</item>
		</list>
 These values may change.</remarks>
</member><member name="P:SPM.OrderData.Email">
	<summary>The email address of the customer.</summary>
</member><member name="P:SPM.OrderData.Total">
	<summary>The 'Total' amount of an order, including tax.</summary>
</member><member name="P:SPM.OrderData.TotalPayments">
	<summary>
 The total amount paid on the order.
 </summary>
</member><member name="P:SPM.OrderData.Notes">
	<summary>Notes from the customer to the store regarding the order.</summary>
</member><member name="P:SPM.OrderData.DatePickup">
	<summary>The date and time the customer desires to pick up an order in the Store’s local time.</summary>
</member><member name="P:SPM.OrderData.OrderItems">
	<summary>A collection of <see cref="T:SPM.OrderItem"/> objects.</summary>
</member><member name="P:SPM.OrderData.OrderTaxes">
	<summary>A collection of <see cref="T:SPM.OrderTax"/> objects.</summary>
</member><member name="P:SPM.OrderData.OrderPayments">
	<summary>
 A collection of the payments applied to the order.
 </summary>
</member><member name="P:SPM.OrderData.OrderType">
	<summary>
 Used to determine the type of the order. 
 </summary>
	<value></value>
	<returns>
 Possible values are:
 <list type="bullet">
			<item>“catering” denotes a Catering order</item>
			<item>“express” denotes an Express order</item>
		</list>
	</returns>
	<remarks></remarks>
</member><member name="M:SPM.OrderData.ToXML">
	<summary>
 The XML representation of the data in the class. This allows for extensibility of the data without changing the object model.
 </summary>
	<returns>A string representing the OrderData as XML.</returns>
</member><member name="T:SPM.OrderData">
	<summary>A class representing order information that is obtained electronically.</summary>
</member><member name="F:SPM.EPaymentDataArrivedEventArgs.ClassId">
	<exclude/>
</member><member name="F:SPM.EPaymentDataArrivedEventArgs.InterfaceId">
	<exclude/>
</member><member name="F:SPM.EPaymentDataArrivedEventArgs.EventsId">
	<exclude/>
</member><member name="M:SPM.EPaymentDataArrivedEventArgs.#ctor">
	<summary>
 Default constructor, required for COM.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.EPaymentDataArrivedEventArgs.#ctor(System.String)">
	<summary>
 Constructor with initial data
 </summary>
	<param name="data">The data to populate the EPaymentDataArrivedEventArgs with.</param>
	<remarks></remarks>
</member><member name="P:SPM.EPaymentDataArrivedEventArgs.Data">
	<summary>
 The data that arrived. Typically this is the XML that represents an order.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.EPaymentDataArrivedEventArgs">
	<summary>
 Event Arguments used when data arrives from the SmartPOS.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.VP3Processor.ProcessorType">
	<summary>
 The Types of proccessor of a payment that is used.    
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.VP3Processor">
	<summary>
 This class handles all proccessing required for the VP3 endpoint.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Transaction.OrderTotal">
	<summary>
 Total Amount for the ORDER, not for this transaction
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Transaction.IsRejected">
	<summary>
 Reflects whether or not the transaction was declined by the ICC in EMV transactions
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.Transaction">
	<summary>
 Represents a transaction to be processed.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.TORData.CouponRefs">
	<summary>
 Gets or sets the list of coupon reference numbers.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.TORData.CertificateRefs">
	<summary>
 Gets or sets the list of certificate reference numbers.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.TORData.Processor">
	<summary>
 Gets or sets the processor for the TOR transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.TORData.RequestID">
	<summary>
 Gets or sets the request id.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.TORData.MDMID">
	<summary>
 Gets or sets the MDMID.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.TORData.IsRejected">
	<summary>
 Gets for sets whether the TOR is rejected or not.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.TORData.HostData">
	<summary>
 Gets or sets the host data collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.TORData.IsDebit">
	<summary>
 Gets or sets whether the TOR was a debit transaction.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.TORData">
	<summary>
 The class that contains all timeout reversal data.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.SPMObjects.SPMProfileInfo.RewardCardEnabled">
	<summary>
 Returns True if reward card is enabled
 </summary>
</member><member name="P:SPM.SPMObjects.SPMProfileInfo.GiftCardEnabled">
	<summary>
 Returns True if gift card is enabled
 </summary>
</member><member name="P:SPM.SPMObjects.SPMProfileInfo.IntegratedOfferEnabled">
	<summary>
 Returns True if integrated offer (Digital Coupon) is enabled
 </summary>
</member><member name="P:SPM.SPMObjects.SPMProfileInfo.StandaloneOfferEnabled">
	<summary>
 Returns True if standalone offer (Scanned Coupon) is enabled
 </summary>
</member><member name="P:SPM.SPMObjects.SPMProfileInfo.EmvEnabled">
	<summary>
 Returns True if EMV  is enabled
 </summary>
</member><member name="P:SPM.SPMObjects.SPMProfileInfo.RequireOrderInfoForVoid">
	<summary>
 Returns whether or not POS needs to build the original payment info for void.
 </summary>
</member><member name="M:SPM.SPMObjects.SPMHealth.CheckDevices">
	<summary>
 The method that will check device status
 </summary>
	<returns>Returns a SPMDeviceReadiness object that holds the status of each device that is configured in SPM</returns>
</member><member name="M:SPM.SPMObjects.SPMHealth.RepairDevice">
	<summary>
 The method that will repair devices and update their status
 </summary>
	<returns>Returns a updated SPMDeviceReadiness object that holds the status of each device which is configured in SPM</returns>
</member><member name="P:SPM.SPMObjects.SPMHealth.SPMDeviceReadiness.DiagStatusResult">
	<summary>
 Gets the value of the status result.
 This will return DeviceStatusResult.Disconnected if one or more devices are being indicated as disconnected
 Statu
 </summary>
</member><member name="P:SPM.SPMObjects.SPMHealth.SPMDeviceReadiness.DeviceDiagnostics">
	<summary>
 Gets the collection of DeviceStatus for the devices that are configured in SPM
 </summary>
</member><member name="P:SPM.SPMObjects.SPMHealth.SPMDeviceReadiness.DiagnosticsError">
	<summary>
 Gets the assembled error message from each device that is not have an OK status
 </summary>
</member><member name="T:SPM.SPMObjects.SPMHealth.SPMDeviceReadiness">
	<summary>
 SPMDeviceReadniness class that holds the current devices status
 </summary>
</member><member name="P:SPM.SPMObjects.SPMHealth.DeviceDiagnostic.DiagStatus">
	<summary>
 Gets DeviceStatusResult of a single device
 </summary>
</member><member name="P:SPM.SPMObjects.SPMHealth.DeviceDiagnostic.DeviceType">
	<summary>
 Gets device type of a single device
 </summary>
</member><member name="P:SPM.SPMObjects.SPMHealth.DeviceDiagnostic.DeviceErrors">
	<summary>
 Gets one or more errors from a single device
 This will return collection of SPM Error object if there are any problems
 </summary>
</member><member name="P:SPM.SPMObjects.SPMHealth.DeviceDiagnostic.ErrorMessage">
	<summary>
 Gets assembled error messages from the device Error collection
 This will return error message if there are any errors in the device
 </summary>
</member><member name="T:SPM.SPMObjects.SPMHealth.DeviceDiagnostic">
	<summary>
 DeviceDiagnostic class that holds single device's status
 </summary>
</member><member name="T:SPM.SPMObjects.SPMHealth">
	<summary>
 The SPMHealth object is responsable for checking the status of devices that are configured in SPM and repairing them.
 </summary>
</member><member name="P:SPM.SimulatedData.Enabled">
	<summary>
 Gets or sets whether simulated data is enabled or not.
 </summary>
	<returns>true if enabled, otherwise false.</returns>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.ResetPromotions">
	<summary>
 Resets all promotions.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.AddPromotion(System.String,System.String)">
	<summary>
 Add a promotion item.
 </summary>
	<param name="promoName">The name of the promotion.</param>
	<param name="promoPLU">The PLU of the promotion.</param>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.ResetLoyaltyCards">
	<summary>
 Resets all loyalty cards.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.AddLoyaltyCard(System.String,System.Int32,System.Int32)">
	<summary>
 Adds a loyalty card.
 </summary>
	<param name="cardNumber">The card number.</param>
	<param name="pointsBalance">The points balance.</param>
	<param name="cashBalance">THe cash balance.</param>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.ResetCreditCards">
	<summary>
 resets all credit cards.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.AddCreditCard(System.String,System.Int32,System.Int32)">
	<summary>
 Add a credit card.
 </summary>
	<param name="cardNumber">The card number.</param>
	<param name="expiryMonth">The expiry month.</param>
	<param name="expiryYear">THe expiry year.</param>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.AddCreditCard(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Add a credit card.
 </summary>
	<param name="track1">The track 1 data.</param>
	<param name="track2">The track 2 data.</param>
	<param name="encTrack1">Encrypted track 1 data.</param>
	<param name="encTrack2">Encrypted track 2 data.</param>
	<param name="ksn">The key serial number.</param>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.ResetScannedData">
	<summary>
 Resets all scanned data.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.AddScannedData(System.String)">
	<summary>
 Add the scanned data.
 </summary>
	<param name="scanData">The data scanned as a string.</param>
	<remarks></remarks>
</member><member name="M:SPM.SimulatedData.TriggerScannedData">
	<summary>
 Trigger a simulated scanned data received.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.SimulatedData">
	<summary>
 Simulated Data for transactions.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.Coupons.ClassId">
	<exclude/>
</member><member name="F:SPM.Coupons.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Coupons.EventsId">
	<exclude/>
</member><member name="M:SPM.Coupons.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.Coupons"/> class.
 </summary>
	<remarks></remarks>
</member><member name="P:SPM.Coupons.Parent">
	<summary>
 Gets the request object owning the card collection.  This allows this collection
 to get/set properties of the request object.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Coupons.Item(System.Int32)">
	<summary>
 The default property for the collection. Specifies the specific
 <see cref="T:SPM.Card"/> object to work with.
 </summary>
	<param name="index">
 The unique index into the collection for the specific
 <see cref="T:SPM.Coupon"/>.
 </param>
</member><member name="M:SPM.Coupons.AddObject(SPM.Coupon)">
	<summary>Adds an <see cref="T:SPM.Card">Card</see> object to the collection.</summary>
	<returns>Returns the key of the newly added object.</returns>
	<param name="value">
 The <see cref="T:SPM.Coupon">Coupon</see> object to add to the collection.
 </param>
</member><member name="M:SPM.Coupons.AddObjects(SPM.Coupons)">
	<summary>
 Adds <see cref="T:SPM.Coupons"/> to the collection.
 </summary>
	<param name="coupons">
 The <see cref="T:SPM.Coupons"/> object to add to the collection.
 </param>
	<remarks></remarks>
</member><member name="P:SPM.Coupons.Count">
	<summary>
 Gets the number of <see cref="T:SPM.Coupon">Coupons</see> in the collection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Coupons.FindByCouponCode(System.String)">
	<summary>
 Searches the collection for a Coupon with the given Couponcode. The Couponcode is

 </summary>
	<param name="couponcode">The unique ID to be used to find the <see cref="T:SPM.Card">Coupon</see>.</param>
	<returns>The <see cref="T:SPM.Coupon">Coupon</see> object with the given key.
 The function will return a value of 'Nothing' if not found.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Coupons.FindByCouponRawData(System.String)">
	<summary>
 Searches the collection for a Coupon with the given Couponcode. The Couponcode is

 </summary>
	<param name="couponRawdata">The unique ID to be used to find the <see cref="T:SPM.Card">Coupon</see>.</param>
	<returns>The <see cref="T:SPM.Coupon">Coupon</see> object with the given key.
 The function will return a value of 'Nothing' if not found.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Coupons.CleanUp">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:SPM.Coupons.Remove(SPM.Coupon)">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:SPM.Coupons.ContainsCouponCode(System.String)">
	<summary>
 Checks to see if a Coupon exists with the given Couponcode.  This is mainly used
 when adding new coupons to check if the 'new' Coupon being added already exists
 in the collection or not.
 </summary>
	<param name="couponcode">The unique ID of the card to be used to find the <see cref="T:SPM.Coupon">Coupon</see>.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Coupons.ContainsCouponRawData(System.String)">
	<summary>
 Checks to see if a Coupon exists with the given CouponRawData.  This is mainly used
 when adding new coupons to check if the 'new' Coupon being added already exists
 in the collection or not.
 </summary>
	<param name="couponRawData">The unique ID of the card to be used to find the <see cref="T:SPM.Coupon">Coupon</see>.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.Coupons">
	<summary>A collection of <see cref="T:SPM.Coupon"/> objects.</summary>
	<moduleiscollection/>
</member><member name="F:SPM.Certificates.ClassId">
	<exclude/>
</member><member name="F:SPM.Certificates.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Certificates.EventsId">
	<exclude/>
</member><member name="P:SPM.Certificates.MobileCustomerPreferenceData">
	<summary>
 Gets Mobile Customer Preference Data.
 Valid Values: [-1, -2, 1-10]
 [1-10]: number of certs that the customer wants to use
 [-1]: Customer's preference is to burn as many certificates as possible without breakage/forfeit
 [-2]: Customer's preference is to burn as many certificates as possible, allowing breakage/forfeit
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Certificates.AddObject(SPM.Certificate)">
	<summary>
 Adds a <see cref="T:SPM.Certificate"/> object to the collection.
 </summary>
	<param name="certificate">
 The <see cref="T:SPM.Certificate"/> object to add to the collection.
 </param>
	<returns>Returns the index of the newly added object.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Certificates.AddObjects(SPM.Certificates)">
	<summary>
 Adds <see cref="T:SPM.Certificates"/> to the collection.
 </summary>
	<param name="certificates">
 The <see cref="T:SPM.Certificates"/> object to add to the collection.
 </param>
	<remarks></remarks>
</member><member name="M:SPM.Certificates.Remove(System.String)">
	<summary>
 Removes a certificate from the payment collection
 </summary>
	<param name="key">The key value of the certificate to remove.</param>
	<remarks></remarks>
</member><member name="M:SPM.Certificates.Remove(System.Int32)">
	<summary>
 Removes a certificate from the payment collection
 </summary>
	<param name="index">The index of the certificate in this collection.</param>
	<remarks></remarks>
</member><member name="M:SPM.Certificates.FindIndex(SPM.Certificate)">
	<summary>
 Find Index of the certificate in this collection
 </summary>
	<param name="certificate">The type of request to perform.</param>
	<returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
	<remarks></remarks>
</member><member name="M:SPM.Certificates.FindAllDesiredCertificatesToUse(System.Decimal,SPM.Currency)">
	<summary>
 Creates a collection of certificates to be applied to the current order.  Number of included certificates will depend on the targetAmoutOfPay, the available certificates, and the customer's certificate-usage preference.
 </summary>
	<param name="targetAmountOfPay">The target amount to be paid with certificates.</param>
	<param name="currency">the currency with certificates</param>
	<returns>The collection of Certificate that matches with the condition based on the target amount and customer's preference of use of certificates. If not found, it returns empty collection</returns>
	<remarks>You may not want to pass the amount that should not be paid by any Certificates. For example, payment amount for Loading Gift Cards </remarks>
</member><member name="T:SPM.Certificates">
	<summary>A collection of <see cref="T:SPM.Certificate"/> objects.</summary>
	<moduleiscollection/>
</member><member name="F:SPM.Certificate.ClassId">
	<exclude/>
</member><member name="F:SPM.Certificate.InterfaceId">
	<exclude/>
</member><member name="F:SPM.Certificate.EventsId">
	<exclude/>
</member><member name="M:SPM.Certificate.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.Certificate"/> class.
 </summary>
</member><member name="P:SPM.Certificate.Key">
	<summary>
 A GUID that identifies this specific certificate object
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.Value">
	<summary>
 Gets the monetary value of this Certificate
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.HostOrderID">
	<summary>
 Gets the order reference id given from the host gateway.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.Guid">
	<summary>
A GUID that identifies this specific certificate object 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.MDMID">
	<summary>
 Gets the MDMID
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.ValueToRedeem">
	<summary>
 Gets/sets how much of the Certificate's value to be redeemed
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.SerialNumber">
	<summary>
 Gets the serial number of this Certificate
 This SerialNumber may also be used as a security token
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.IsForfeitable">
	<summary>
 Gets whether or not this certificate is Forfeitable(Breakable)
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.Currency">
	<summary>
 Gets the Currency type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.IsSelectedByCustomer">
	<summary>
 Gets whether or not this certificate has been selected by the Customer
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.IsProcessed">
	<summary>
 Gets whether or not this certificate has been processed by the Host Processor
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.EndDate">
	<summary>
 Gets the expiration date of the certificate.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.Certificate.VoidReferenceNumber">
	<summary>
 The void reference number returned from the certificate processor.
 This property value can be re-used for voiding out the certificate when it needed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SPM.Certificate.IsReady">
	<summary>
 Check the Certificate available.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SPM.Certificate">
	<summary>
 Certificate information obtained through electronic means.
 </summary>
	<remarks></remarks>
</member><member name="F:SPM.AnytimeScanEventArgs.ClassId">
	<exclude/>
</member><member name="F:SPM.AnytimeScanEventArgs.InterfaceId">
	<exclude/>
</member><member name="F:SPM.AnytimeScanEventArgs.EventsId">
	<exclude/>
</member><member name="P:SPM.AnytimeScanEventArgs.Card">
	<summary>
 The Card object created as a result of the scanning event. Holds the scanned data.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.AnytimeScanEventArgs.ScanEventType">
	<summary>
 Gets the Scanevent types
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.AnytimeScanEventArgs">
	<summary>
 Event Arguments used when QR Code Scanned.
 </summary>
	<remarks></remarks>
	<moduleiscollection/>
</member><member name="M:SPM.ISimulatedData.GetEnabled">
	<summary>
 Gets whether simulated data is enabled or not.
 </summary>
	<returns>true if enabled, otherwise false.</returns>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.SetEnabled(System.Boolean)">
	<summary>
 Sets whether simulated data is enabled or not.
 </summary>
	<param name="value">value to set.</param>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.ResetPromotions">
	<summary>
 Resets all promotions.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.AddPromotion(System.String,System.String)">
	<summary>
 Add a promotion item.
 </summary>
	<param name="promoName">The name of the promotion.</param>
	<param name="promoPLU">The PLU of the promotion.</param>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.ResetLoyaltyCards">
	<summary>
 Resets all loyalty cards.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.AddLoyaltyCard(System.String,System.Int32,System.Int32)">
	<summary>
 Add a loyalty card.
 </summary>
	<param name="cardNumber">The card number.</param>
	<param name="pointsBalance">The points balance.</param>
	<param name="cashBalance">THe cash balance.</param>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.ResetCreditCards">
	<summary>
 resets all credit cards.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.AddCreditCard(System.String,System.Int32,System.Int32)">
	<summary>
 Add a credit card.
 </summary>
	<param name="cardNumber">The card number.</param>
	<param name="expiryMonth">The expiry month.</param>
	<param name="expiryYear">THe expiry year.</param>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.AddCreditCard(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Add a credit card.
 </summary>
	<param name="track1">The track 1 data.</param>
	<param name="track2">The track 2 data.</param>
	<param name="encTrack1">Encrypted track 1 data.</param>
	<param name="encTrack2">Encrypted track 2 data.</param>
	<param name="ksn">The key serial number.</param>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.ResetScannedData">
	<summary>
 Resets all scanned data.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.AddScannedData(System.String)">
	<summary>
 Add the scanned data.
 </summary>
	<param name="scanData">The data scanned as a string.</param>
	<remarks></remarks>
</member><member name="M:SPM.ISimulatedData.TriggerScannedData">
	<summary>
 Trigger a simulated scanned data received.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.ISimulatedData">
	<summary>
 Interface for Simulated Data.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.LoyaltyTransaction.TransactionTypes">
	<summary>
 Represents Transaction type.
 </summary>
</member><member name="T:SPM.LoyaltyTransaction">
	<summary>
 Transactions with loyalty gateway Thorlink.
 </summary>
	<remarks></remarks>
</member><member name="T:SPM.MobileTransaction">
	<summary>
 A transaction object for mobiles.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.SnapLogicProcessor.GetPrimaryMDMID(System.Collections.Generic.List{SPM.Payment},SPM.SpmEnums.RequestTypes)">
	<summary>
 Gets Primary MDMID from Payment
 </summary>
	<param name="pays"></param>
	<returns>
 Return empty string if not found,
 Return Null if error
 </returns>
	<remarks></remarks>
</member><member name="M:SPM.SnapLogicProcessor.GetPrimaryMDMID(System.Collections.Generic.List{SPM.Card},SPM.SpmEnums.RequestTypes)">
	<summary>
 Gets Primary MDMID from Cards
 </summary>
	<param name="cards"></param>
	<returns>
 Return empty string if not found,
 Return Null if error
 </returns>
	<remarks></remarks>
</member><member name="M:SPM.SnapLogicProcessor.NeedCashOnlyTransaction(SPM.Order,SPM.SpmEnums.RequestTypes)">
	<summary>
 Check if Transaction needs to fall back as a cash transaction...
 i.e.) If PromoCard has no mdmid associated,
       the transaction needs to be performed as a cash transaction
       unless there is no oltp such as gift pay, credit pay transactions.
 </summary>
	<param name="order"></param>
	<param name="requestType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfoProperty.AssemblyInfo">
	<summary>
 The singleton instance of the configuration information, to be used in other
 classes and modules for this assembly.
 </summary>
</member><member name="T:SPM.My.MyAssemblyInfoProperty">
	<exclude/>
</member><member name="P:SPM.My.MyAssemblyInfo.Default">
	<summary>
 Gets the default.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:SPM.My.MyAssemblyInfo.AssemblyAttribs(System.Reflection.Assembly)">
	<summary>
 returns string name / string value pair of all attribs
 for specified assembly
 </summary>
	<remarks>
 note that Assembly* values are pulled from AssemblyInfo file in project folder

 Trademark       = AssemblyTrademark string
 Debuggable      = True
 GUID            = 7FDF68D5-8C6F-44C9-B391-117B5AFB5467
 CLSCompliant    = True
 Product         = AssemblyProduct string
 Copyright       = AssemblyCopyright string
 Company         = AssemblyCompany string
 Description     = AssemblyDescription string
 Title           = AssemblyTitle string
 </remarks>
</member><member name="M:SPM.My.MyAssemblyInfo.AssemblyBuildDate(System.Reflection.Assembly,System.Boolean)">
	<summary>
 Returns DateTime this Assembly was last built. Will attempt to calculate from build number, if possible. 
 If not, the actual LastWriteTime on the assembly file will be returned.
 </summary>
	<param name="a">Assembly to get build date for</param>
	<param name="forceFileDate">Don't attempt to use the build number to calculate the date</param>
	<returns>DateTime this assembly was last built</returns>
</member><member name="M:SPM.My.MyAssemblyInfo.AssemblyLastWriteTime(System.Reflection.Assembly)">
	<summary>
 exception-safe retrieval of LastWriteTime for this assembly.
 </summary>
	<returns>File.GetLastWriteTime, or DateTime.MaxValue if exception was encountered.</returns>
</member><member name="P:SPM.My.MyAssemblyInfo.AssemblyLocation">
	<summary>
 Gets the assembly location.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.Folder">
	<summary>
 Gets the assembly folder.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.FileVersionInfo">
	<summary>
 Gets the file version info.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.BuildDate">
	<summary>
 Gets the build date.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.Company">
	<summary>
 Gets the company.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.Copyright">
	<summary>
 Gets the copyright.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.ProductDescription">
	<summary>
 Gets the product description.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.ProductName">
	<summary>
 Gets the name of the product.	
 </summary>
	<value>The name of the product.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.ProductTitle">
	<summary>
 Gets the product title.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAssemblyInfo.Version">
	<summary>
 Gets the version.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:SPM.My.MyAssemblyInfo.ToString">
	<summary>
 Toes the string.	
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.NoPrintText">
	<summary>
 Gets or sets the no print text.
 </summary>
	<value>The no print text.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.BonusPointsText">
	<summary>
 Gets or sets the bonus points text.
 </summary>
	<value>The bonus points text.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.EarnedPointsText">
	<summary>
 Gets or sets the earned points text.
 </summary>
	<value>The earned points text.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.PointsText">
	<summary>
 Gets or sets the points text.
 </summary>
	<value>The points text.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.AdminToolLocation">
	<summary>
 Gets or sets the admin tool location.
 </summary>
	<value>The admin tool location.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.TorFilename">
	<summary>
 Gets the TOR filename.
 </summary>
	<value>The TOR filename.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.TorArchiveDirName">
	<summary>
 Gets the TOR Archive Directory name.
 </summary>
	<value>The TOR Archive Directory name.</value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.TorFileLoc">
	<summary>
 Gets the TOR file loc.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.MyAppSettings.TorArchiveDirLoc">
	<summary>
 Gets the TOR Archive Directory location.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="T:SPM.My.MyAppSettings">
	<summary>
	</summary>
</member><member name="P:SPM.My.MyAppSettingsProperty.AppSettings">
	<summary>
 The singleton instance of the configuration information, to be used in other
 classes and modules for this assembly.
 </summary>
</member><member name="T:SPM.My.MyAppSettingsProperty">
	<exclude/>
</member><member name="M:SPM.My.Configuration.#ctor(System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:SPM.My.Configuration"/> class.	
 </summary>
	<param name="key">The key.</param>
	<remarks></remarks>
</member><member name="P:SPM.My.Configuration.AppSettings">
	<summary>
 Gets the app settings.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="T:SPM.My.Configuration">
	<summary>
 A class that represents the configuration values.
 </summary>
</member><member name="P:SPM.My.MyAppSettings.Default">
	<summary>
 Gets the default.	
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SPM.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:SPM.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:SPM.My.Resources.Resources.Arrow2___down">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.Arrow2___up">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.BackspaceImage">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.BadDevice">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.btn_bg_large">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.btn_bg_med">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.btn_bg_small">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_FirmwareFailConnected">
	<summary>
  Looks up a localized string similar to The firmware update failed. Please see below for reason and steps to follow..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_FirmwareFailDisconnected">
	<summary>
  Looks up a localized string similar to The device appears to not be connected. Please follow the steps below..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_FirmwareSuccessConnected">
	<summary>
  Looks up a localized string similar to The device is connected and ready to be used..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_FirmwareSuccessDisconnect">
	<summary>
  Looks up a localized string similar to The device appears to not be connected. Please follow the steps below..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_InitConnected">
	<summary>
  Looks up a localized string similar to The device is connected and ready to be used..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_InitConnectedAvail">
	<summary>
  Looks up a localized string similar to The firmware on your device needs to be updated. Please click the 'Firmware Update' button below..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_InitConnectedNotAvail">
	<summary>
  Looks up a localized string similar to The device is connected and ready to be used. To see if an update is available for the firmware on the device, click the 'Firmware Update' button below..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_InitDisconnected">
	<summary>
  Looks up a localized string similar to The device appears to be disconnected. Please follow the steps below..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_InitGeneral">
	<summary>
  Looks up a localized string similar to Follow the instruction below to verify that this device is connected to the POS and is ready to be used..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_SetupTitle">
	<summary>
  Looks up a localized string similar to Device Setup for {0}.
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_TroubleShootingSteps">
	<summary>
  Looks up a localized string similar to Troubleshooting steps:
1. Plug in the {0} to a working USB port.
2. Close any application that is currently using the device.
3. Press the Verify button..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_VerifyConnected">
	<summary>
  Looks up a localized string similar to The device has been found and verified and is ready to be used..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_VerifyConnectedAvail">
	<summary>
  Looks up a localized string similar to The firmware on your device needs to be updated. Please click the 'Firmware Update' button below..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_VerifyConnectedNotAvail">
	<summary>
  Looks up a localized string similar to The device is connected and ready to be used. To see if an update is available for the firmware on the device, click the 'Firmware Update' button below..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Device_VerifyDisconnected">
	<summary>
  Looks up a localized string similar to The device appears to still be disconnected. Please follow the steps below. If you continue to experience problems call the Helpdesk..
</summary>
</member><member name="P:SPM.My.Resources.Resources.Forms_bg">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.Forms_line">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.GoodDevice">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.numericpad_bg">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="P:SPM.My.Resources.Resources.UpdateStoreIDForm_Background">
	<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member><member name="T:SPM.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:SPM.CardWatcher.Notify(SPM.Card)">
	<summary>
 This method will be called when a Card object is added to the card collection. 
 </summary>
	<param name="card">Card object which is added to the card collection.</param>
	<remarks></remarks>
</member><member name="T:SPM.CardWatcher">
	<summary>
 CardWatcher interface can be implemented to receive notifications whenever a Card object is added to SPM's card collection.
 To be implemented by POS Software.
 </summary>
	<remarks></remarks>
</member><member name="M:SPM.DirectDevicePrompting.DataEntryView.GetCardsVoidRRN(SPM.Card)">
	<summary>
 Gets the Card's RRN value from VoidDataCollection.  Returns null if no RRN found.
 </summary>
	<param name="card">The card whose VoidDataCollection will be checked for an RRN value.</param>
	<returns>card's RRN string from VoidDataCollection.  If not such value exists, returns null.</returns>
	<remarks></remarks>
</member><member name="F:SPM.DirectDevicePrompting.BindablePasswordBox.PasswordProperty">
	<summary>
 The password dependency property.
 </summary>
</member><member name="M:SPM.DirectDevicePrompting.BindablePasswordBox.#cctor">
	<summary>
 Static constructor to initialize the dependency properties.
 </summary>
</member><member name="M:SPM.DirectDevicePrompting.BindablePasswordBox.#ctor">
	<summary>
 Saves the password changed callback and sets the child element to the password box.
 </summary>
</member><member name="P:SPM.DirectDevicePrompting.BindablePasswordBox.Password">
	<summary>
 The password dependency property.
 </summary>
</member><member name="M:SPM.DirectDevicePrompting.BindablePasswordBox.OnPasswordPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
	<summary>
 Handles changes to the password dependency property.
 </summary>
	<param name="d">the dependency object</param>
	<param name="eventArgs">the event args</param>
</member><member name="M:SPM.DirectDevicePrompting.BindablePasswordBox.HandlePasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Handles the password changed event.
 </summary>
	<param name="sender">the sender</param>
	<param name="eventArgs">the event args</param>
</member>
</members>
</doc>